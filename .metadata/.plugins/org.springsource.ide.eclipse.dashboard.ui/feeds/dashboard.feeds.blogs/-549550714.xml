<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Spring</title>
  <link rel="alternate" href="https://spring.io/blog" />
  <link rel="self" href="https://spring.io/blog.atom" />
  <id>http://spring.io/blog.atom</id>
  <icon>https://spring.io/favicon.ico</icon>
  <updated>2015-10-21T04:59:25Z</updated>
  <entry>
    <title>Spring Boot 1.3.0.RC1 Available Now</title>
    <link rel="alternate" href="https://spring.io/blog/2015/10/21/spring-boot-1-3-0-rc1-available-now" />
    <category term="releases" label="Releases" />
    <author>
      <name>Phil Webb</name>
    </author>
    <id>tag:spring.io,2015-10-21:2283</id>
    <updated>2015-10-21T04:59:25Z</updated>
    <content type="html">&lt;p&gt;Spring Boot v1.3.0.RC1 is available now from the &lt;a href="http://repo.springsource.org/milestone/"&gt;Spring milestone repository&lt;/a&gt;. This release closes &lt;a href="https://github.com/spring-projects/spring-boot/issues?q=milestone%3A1.3.0.RC1+is%3Aissue+is%3Aclosed"&gt;almost 140 issues&lt;/a&gt; and merges &lt;a href="https://github.com/spring-projects/spring-boot/pulls?utf8=%E2%9C%93&amp;q=is%3Apr+is%3Aclosed+milestone%3A1.3.0.RC1"&gt;53 pull-requests&lt;/a&gt;! Thanks to everyone that has contributed.&lt;/p&gt;&lt;p&gt;We&amp;rsquo;re not planning on having a long release candidate phase, so please do try RC1 and let us know if you find any problems.&lt;/p&gt;&lt;p&gt;For a complete list of changes, and upgrade instructions, see the &lt;a href="https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-1.3-Release-Notes"&gt;Spring Boot 1.3 Release Notes&lt;/a&gt; on the wiki and the updated &lt;a href="http://docs.spring.io/spring-boot/docs/1.3.0.RC1/reference/htmlsingle/"&gt;reference documentation&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;a href="http://projects.spring.io/spring-boot/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot"&gt;GitHub&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot/issues"&gt;Issues&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle"&gt;Documentation&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2015 replay: Modern Java Component Design with Spring Framework 4.2</title>
    <link rel="alternate" href="https://spring.io/blog/2015/10/19/springone2gx-2015-replay-modern-java-component-design-with-spring-framework-4-2" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-10-20:2282</id>
    <updated>2015-10-19T19:55:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2015&lt;br/&gt;Speakers: Juergen Holler, Stephane Nicoll&lt;br/&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/modern-java-component-design-with-spring-framework-42"&gt;http://www.slideshare.net/SpringCentral/modern-java-component-design-with-spring-framework-42&lt;/a&gt;&lt;br/&gt;Spring&amp;rsquo;s programming and configuration model has a strong design philosophy with respect to application components and configuration artifacts. Spring&amp;rsquo;s annotation-based component story is fine-tuned for source code readability as well as consistency across an entire application&amp;rsquo;s codebase. This session presents selected Spring Framework 4 component model highlights, with a focus on the upcoming Spring Framework 4.2 and a selection of Java 8 enabled features, illustrated with many code examples and noteworthy design considerations.&lt;br/&gt;&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/7uii6osglDg" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2015 replay: Spring Cloud *: Exploring Alternative Spring Cloud Implementations</title>
    <link rel="alternate" href="https://spring.io/blog/2015/10/19/springone2gx-2015-replay-spring-cloud-exploring-alternative-spring-cloud-implementations" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-10-20:2281</id>
    <updated>2015-10-19T19:52:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2015&lt;br/&gt;Speaker: Spencer Gibb&lt;br/&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/spring-cloud-alternative-implementations-of-discovery-config-bus"&gt;http://www.slideshare.net/SpringCentral/spring-cloud-alternative-implementations-of-discovery-config-bus&lt;/a&gt;&lt;br/&gt;In this session we will discuss the Spring Cloud abstractions and interfaces that an implementation might choose to implement: DiscoveryClient, LoadBalancerClient, Configuration and Bus. We will compare and contrast some target technologies and discus the tradeoffs and nuances of each, such as: netflix, consul, etcd, zookeeper and lattice. We will then show and demonstrate Spring Cloud implementations of those technologies.&lt;br/&gt;&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/NV6qHLEzteQ" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2015 replay: A How to Guide to Security in the PAAS Cloud</title>
    <link rel="alternate" href="https://spring.io/blog/2015/10/19/springone2gx-2015-replay-a-how-to-guide-to-security-in-the-paas-cloud" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-10-20:2280</id>
    <updated>2015-10-19T19:50:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2015&lt;br/&gt;Speaker: John Field, Shawn McKinney&lt;br/&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/a-how-to-guide-to-security-in-the-paas-cloud"&gt;http://www.slideshare.net/SpringCentral/a-how-to-guide-to-security-in-the-paas-cloud&lt;/a&gt;&lt;br/&gt;Most developers still deal with application security issues in isolation, without understanding the security of the &amp;quot;&amp;ldquo;full stack&amp;rdquo;&amp;quot;. As a result, security is sometimes inconsistent, and can be seen as a barrier to moving applications to the cloud. The session will examine the security of a typical Java Web application in an enterprise deployment. We will then look at what needs to change when that secure Java application is “forklifted” into Cloud Foundry. Finally, we will look at the benefits of adopting cloud native security protocols, such as OAuth2 and SAML2. The journey will cover 5 common application security architecture patterns taken from real world customer problems. We will compare how the security integration patterns differ between a standalone application and a cloud native application. From legacy enterprise identity management integration to security for microservices, this technical session includes practical, hands-on guidance to properly implementing authentication, authorization, and confidentiality controls using Spring and Cloud Foundry. We have all heard of the idea of the “Full Stack” developer — someone who can understand the application up and down the whole stack. The goal of this session is to describe the full security stack and show how it differs between standalone deployments and a PAAS deployment.&lt;br/&gt;&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/FIyJBoq8cBc" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2015 replay: Securing Microservices with Spring Cloud Security</title>
    <link rel="alternate" href="https://spring.io/blog/2015/10/19/springone2gx-2015-replay-securing-microservices-with-spring-cloud-security" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-10-20:2278</id>
    <updated>2015-10-19T19:46:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2015&lt;br/&gt;Speaker: Will Tran&lt;br/&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/securing-microservices-with-spring-cloud-security-53170178"&gt;http://www.slideshare.net/SpringCentral/securing-microservices-with-spring-cloud-security-53170178&lt;/a&gt;&lt;br/&gt;This talk will walk through the authentication and authorization scenarios that you may encounter once you start building out microservices. We&amp;rsquo;ll go over OAuth2, OpenID Connect, and how to leverage those standards with Spring Cloud Security, so you can build out secure services that can be easily consumed by both Spring and non-Spring clients.&lt;br/&gt;&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/USMl2GNg2r0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2015 replay: Spring Boot Micro-services, Containers, and Kubernetes - How To</title>
    <link rel="alternate" href="https://spring.io/blog/2015/10/19/springone2gx-2015-replay-spring-boot-micro-services-containers-and-kubernetes-how-to" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-10-20:2277</id>
    <updated>2015-10-19T19:44:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2015&lt;br/&gt;Speaker: Ray Tsang, Google&lt;br/&gt;Slides: TBD&lt;br/&gt;Join this session to learn how to create a Java-based microservice using Spring Boot, containerize it using Maven plugins, and subsequently deploy a fleet of microservices and dependent components such as Redis using Kubernetes. Spring Boot makes creating microservices fast and easy - when it comes to running a single instance. Like most Java application, the harder part is usually the clustering and fail-over configurations. First, we&amp;rsquo;ll go over how get started with Spring Boot, and, subsequently, using Maven plugins to generate and create Docker images during the build process. Next, we&amp;rsquo;ll go over some basic architecture and configurations, such as: - Configuring Spring Session - Using Redis as the session store - Testing the configuration locally with container linking - Tips and tricks for faster startup (/dev/./urandom is your friend) Finally, with the images, we&amp;rsquo;ll deploy the microservice into Kubernetes: - Defining pods and services - Linking microservices to Redis using Kubernetes - Perform rolling upgrades of the application - Canary new versions of the microservices into the fleet Best part - we can visualize all of these activities happening in Kubernetes.&lt;/p&gt;&lt;p&gt;Join this session to learn how to create a Java-based microservice using Spring Boot, containerize it using Maven plugins, and subsequently deploy a fleet of microservices and dependent components such as Redis using Kubernetes. Spring Boot makes creating microservices fast and easy - when it comes to running a single instance. Like most Java application, the harder part is usually the clustering and fail-over configurations. First, we&amp;rsquo;ll go over how get started with Spring Boot, and, subsequently, using Maven plugins to generate and create Docker images during the build process. Next, we&amp;rsquo;ll go over some basic architecture and configurations, such as: - Configuring Spring Session - Using Redis as the session store - Testing the configuration locally with container linking - Tips and tricks for faster startup (/dev/./urandom is your friend) Finally, with the images, we&amp;rsquo;ll deploy the microservice into Kubernetes: - Defining pods and services - Linking microservices to Redis using Kubernetes - Perform rolling upgrades of the application - Canary new versions of the microservices into the fleet Best part - we can visualize all of these activities happening in Kubernetes.&lt;br/&gt;&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/Bcs-inRnLDc" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2015 replay: Spring Boot for DevOps</title>
    <link rel="alternate" href="https://spring.io/blog/2015/10/19/springone2gx-2015-replay-spring-boot-for-devops" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-10-20:2276</id>
    <updated>2015-10-19T19:43:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2015&lt;br/&gt;Speaker: Nicholas Frankel&lt;br/&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/spring-boot-for-devops"&gt;http://www.slideshare.net/SpringCentral/spring-boot-for-devops&lt;/a&gt;&lt;br/&gt;Spring Boot is a product from Spring, that provides many configuration defaults for a new Spring project, so that one can set up a project in minutes. However, this is only one of the many features of Spring Boot. One of its module also provides many important Non-Functional Requirements out-of-the-box: monitoring, metrics, exposing those over HTTP, etc. In this presentation, I&amp;rsquo;ll demo some of those, that will make DevOps more than a little happy.&lt;br/&gt;Comments: DevOps that don&amp;rsquo;t know about Spring Boot should. Out-of-the-box features are priceless and include metrics, healthchecks, hearbeat and more.&lt;br/&gt;&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/Qzjs18pJQeU" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2015 replay: 12 Factor, or Cloud Native Apps for Spring Developers</title>
    <link rel="alternate" href="https://spring.io/blog/2015/10/19/springone2gx-2015-replay-12-factor-or-cloud-native-apps-for-spring-developers" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-10-20:2275</id>
    <updated>2015-10-19T19:37:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2015&lt;br/&gt;Speaker: Cornelia Davis&lt;br/&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/12-factor-cloud-native-apps-for-spring-developers"&gt;http://www.slideshare.net/SpringCentral/12-factor-cloud-native-apps-for-spring-developers&lt;/a&gt;&lt;br/&gt;The third platform, characterized by a fluid infrastructure where virtualized servers come into and out of existence, and workloads are constantly being moved about and scaled up and down to meet variable demand, calls for new design patterns, processes and even culture. One of the most well known descriptions of these new paradigms is the Twelve Factor App (12factor.net), which describes elements of cloud native applications. Many of these needs are squarely met through the Spring Framework, others require support from other systems. In this session we will examine each of the twelve factors and present how Spring, and platforms such as Cloud Foundry satisfy them, and in some cases we’ll even suggest that responsibility should shift from Spring to platforms. At the conclusion you will understand what is needed for cloud-native applications, why and how to deliver on those requirements.&lt;br/&gt;&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/l-BDwknHzn4" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2015 replay: Lattice: A Cloud-Native Platform for Your Spring Applications</title>
    <link rel="alternate" href="https://spring.io/blog/2015/10/19/springone2gx-2015-replay-lattice-a-cloud-native-platform-for-your-spring-applications" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-10-20:2274</id>
    <updated>2015-10-19T19:34:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2015&lt;br/&gt;Speaker: Matt Stine&lt;br/&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/lattice-a-cloud-native-platform-for-your-spring-applications"&gt;http://www.slideshare.net/SpringCentral/lattice-a-cloud-native-platform-for-your-spring-applications&lt;/a&gt;&lt;br/&gt;Lattice is a cloud-native application platform that enables you to run your applications in containers like Docker, on your local machine via Vagrant. Lattice includes features like:&lt;br/&gt;Cluster scheduling&lt;br/&gt;HTTP load balancing&lt;br/&gt;Log aggregation&lt;br/&gt;Health management&lt;br/&gt;Lattice does this by packaging a subset of the components found in the Cloud Foundry elastic runtime. The result is an open, single-tenant environment suitable for rapid application development, similar to Kubernetes and Mesos Applications developed using Lattice should migrate unchanged to full Cloud Foundry deployments.&lt;/p&gt;&lt;p&gt;Lattice can be used by Spring developers to spin up powerful micro-cloud environments on their desktops, and can be useful for developing and testing cloud-native application architectures. Lattice already has deep integration with Spring Cloud and Spring XD, and you’ll have the opportunity to see deep dives into both at this year’s SpringOne 2GX. This session will introduce the basics:&lt;/p&gt;&lt;p&gt;Installing Lattice&lt;br/&gt;Lattice’s Architecture&lt;br/&gt;How Lattice Differs from Cloud Foundry&lt;br/&gt;How to Package and Run Your Spring Apps on Lattice&lt;br/&gt;&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/tudhG_mDMdk" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2015 replay: Getting Started with Spring Cloud</title>
    <link rel="alternate" href="https://spring.io/blog/2015/10/19/springone2gx-2015-replay-getting-started-with-spring-cloud" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-10-20:2273</id>
    <updated>2015-10-19T19:31:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2015.&lt;/p&gt;
&lt;p&gt;Speakers: Dr. Dave Syer, Josh Long&lt;/p&gt;
&lt;p&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/getting-started-with-spring-cloud"&gt;http://www.slideshare.net/SpringCentral/getting-started-with-spring-cloud&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;p&gt;Spring Cloud 1.0 is here! It offers a powerful way to create and consume microservices. As you introduce new services, you introduce integration problems: services can be shaky, they can disappear and - as they&amp;rsquo;re often exposed over HTTP - they require a bit more footwork than in-process method invocations. In this webinar, we&amp;rsquo;ll focus specifically on how Spring Cloud integrates service registration (e.g. Eureka), declarative REST clients (with Netflix&amp;rsquo;s Feign), reactive programming and the circuit breaker pattern with Hystrix to support easy, robust service-to-service invocations, and messaging microservices with Spring Cloud Stream. This is a deep dive on how to make connect and consume microservices, and is a natural next step after the introduction to building microservices with Spring Boot.&lt;br/&gt;&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/cCEvFDhe3os" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2015 replay: Modern Frontend Engineering</title>
    <link rel="alternate" href="https://spring.io/blog/2015/10/19/springone2gx-2015-replay-modern-frontend-engineering" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-10-20:2271</id>
    <updated>2015-10-19T18:51:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2015.&lt;/p&gt;
&lt;p&gt;Speakers: Dustin Whittle, AppDynamics&lt;/p&gt;
&lt;p&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/modern-frontend-engineering"&gt;http://www.slideshare.net/SpringCentral/modern-frontend-engineering&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;p&gt;The web has evolved tremendously in the last decade. In this talk we will dive into the latest tools and techniques that make for a modern foundation for frontend engineering. We will start with bootstrapping with Yeoman, move into managing dependencies with bower, and finally how to automate best practices with Grunt and Gulp. We will discuss the pros and cons of modern ui toolkits like Zurb, Bootstrap, and SemanticUI and modern javascript frameworks like React, Angular, and Ember. We will highlight the latest in css frameworks, javascript frameworks, and why you should choose the right toolset for complex app or a single page app. When you leave this session you will be prepared to launch a modern web application in 2015.&lt;br/&gt;&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/-uA4a8y8q9I" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2015 replay: Building and Tuning High Performance Java Platforms</title>
    <link rel="alternate" href="https://spring.io/blog/2015/10/19/springone2gx-2015-replay-building-and-tuning-high-performance-java-platforms" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-10-20:2270</id>
    <updated>2015-10-19T18:45:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2015.&lt;/p&gt;
&lt;p&gt;Speakers: Emad Benjamin, VMWare&lt;/p&gt;
&lt;p&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/building-and-tuning-high-performance-java-platforms"&gt;http://www.slideshare.net/SpringCentral/building-and-tuning-high-performance-java-platforms&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;p&gt;In a world of the cloud, virtualization, containerization, microservices and nanoservices we talk about scaling up, scaling out, and decoupling our systems, but typically miss scaling down to an embedded platform.&lt;br/&gt;At the same time that we have moved away from heavy monolithic web containers, we&amp;rsquo;ve seen a rise of powerful low cost embedded Linux devices such as the RaspberryPi.&lt;br/&gt;&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/IGS-rqSjmFk" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2015 replay: Bringing javax.cache'ing to your application</title>
    <link rel="alternate" href="https://spring.io/blog/2015/10/19/springone2gx-2015-replay-bringing-javax-cache-ing-to-your-application" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-10-20:2268</id>
    <updated>2015-10-19T18:40:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2015.&lt;/p&gt;
&lt;p&gt;Speakers: Jeff Brown, OCI Web&lt;/p&gt;
&lt;p&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/bringing-javaxcacheing-to-your-app"&gt;http://www.slideshare.net/SpringCentral/bringing-javaxcacheing-to-your-app&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;p&gt;10 years in the making and finally JSR-107 has been finalized. We now have a standardized Caching API for the Java Platform. And that&amp;rsquo;s all ready for you to use in your Spring apps. But what does it really enable for you? What&amp;rsquo;s with these optional features? No transaction support? How do you efficiently make use of this new API to solve real world problems in your application today? We&amp;rsquo;ll look into how get you best started introducing caching into your Spring application to solve real world problems. And, as we explore the javax.cache API in much more details, we&amp;rsquo;ll see how to push the specifications to its limits and&amp;hellip; beyond. Whether implicitly through frameworks (like Spring and Hibernate), or explicitly (cache-aside, cache-through, &amp;hellip;). And how to abstract yourself from a given provider when you require more than what the specifications cover (e.g. transactional caches). We&amp;rsquo;ll also cover some implementer specifics you might want to account for when choosing an implementation, especially if you plan to push the spec to the extreme, like when going distributed and caching terabytes of data.&lt;br/&gt;&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/CsaOK1GPj-E" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2015 replay: Booting IoT with Grails</title>
    <link rel="alternate" href="https://spring.io/blog/2015/10/19/springone2gx-2015-replay-booting-iot-with-grails" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-10-20:2269</id>
    <updated>2015-10-19T18:38:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2015.&lt;/p&gt;
&lt;p&gt;Speakers: Colin Harrington, OCI Web&lt;/p&gt;
&lt;p&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/booting-iot-with-grails"&gt;http://www.slideshare.net/SpringCentral/booting-iot-with-grails&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;p&gt;In a world of the cloud, virtualization, containerization, microservices and nanoservices we talk about scaling up, scaling out, and decoupling our systems, but typically miss scaling down to an embedded platform.&lt;br/&gt;At the same time that we have moved away from heavy monolithic web containers, we&amp;rsquo;ve seen a rise of powerful low cost embedded Linux devices such as the RaspberryPi.&lt;br/&gt; &lt;iframe width="560" height="315" src="https://www.youtube.com/embed/ExtWTUWV9mg" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2015 replay: Restful Grails 3</title>
    <link rel="alternate" href="https://spring.io/blog/2015/10/19/springone2gx-2015-replay-restful-grails-3" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-10-20:2267</id>
    <updated>2015-10-19T18:37:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2015.&lt;/p&gt;
&lt;p&gt;Speakers: Jeff Brown, OCI Web&lt;/p&gt;
&lt;p&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/restful-grails3"&gt;http://www.slideshare.net/SpringCentral/restful-grails3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;p&gt;Grails 3 includes a lot of features and functionality related to building RESTful services. These include an entirely new and more flexibile data binding system, runtime and compile time metaprogramming which greatly reduce the amount of code required in your RESTful services, a rich set of content negotiation tools and more.&lt;br/&gt;&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/LVNJza4NO5U" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2015 replay: Microservice Architecture with Grails</title>
    <link rel="alternate" href="https://spring.io/blog/2015/10/19/springone2gx-2015-replay-microservice-architecture-with-grails" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-10-20:2266</id>
    <updated>2015-10-19T18:24:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2015.&lt;/p&gt;
&lt;p&gt;Speakers: Jeff Brown, OCI Web&lt;/p&gt;
&lt;p&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/microservice-architecture-with-grails-3"&gt;http://www.slideshare.net/SpringCentral/microservice-architecture-with-grails-3&lt;/a&gt;&lt;/p&gt;&lt;p&gt;For some web applications it does not make sense to have 1 monolithing process which handles all of the requirements of the application. More and more often Grails is showing up in microservice architectures where instead of building 1 monolithing web application which is responsible for all of the pieces of the application puzzle, microservice applications are being assembled which collectively solve the requirements of the larger application. Grails is very well suited for this type of architecture. A microservice based architecture can result in applications which are easier to build, easier to test, easier to extend and are easier to adapt to changing business requirements.&lt;br/&gt;&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/SxukqBZmWsM" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2015 replay: Grails 3.x update</title>
    <link rel="alternate" href="https://spring.io/blog/2015/10/19/springone2gx-2015-replay-grails-3-x-update" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-10-20:2265</id>
    <updated>2015-10-19T18:18:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2015.&lt;/p&gt;
&lt;p&gt;Speakers: Graeme Rocher&lt;/p&gt;
&lt;p&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/whats-new-in-grails-3"&gt;http://www.slideshare.net/SpringCentral/whats-new-in-grails-3&lt;/a&gt;&lt;/p&gt;&lt;p&gt;In this talk, Grails project lead Graeme Rocher, will update you on the latest release of Grails and what is coming up during the course of the next year.&lt;/p&gt;&lt;p&gt;Covering all the new features of Grails 3 including the new plugin model, Gradle build and profiles support, this talk promise to be packed full of information for those interested in the latest and greatest from the Grails community.&lt;br/&gt;&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/U2C7iAGvLHQ" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2015 replay: Day 2 Technical Keynote - Cloud Native Enterprise</title>
    <link rel="alternate" href="https://spring.io/blog/2015/10/19/springone2gx-2015-replay-day-2-technical-keynote-cloud-native-enterprise" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-10-20:2264</id>
    <updated>2015-10-19T18:14:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2015.&lt;/p&gt;
&lt;p&gt;Speakers: Recorded at SpringOne2GX 2015.&#xD;
Speakers: Guillaume LaForge, Graeme Rocher, Josh Long, Dr. David Syer, Mark Fisher, Scott Frederick&lt;/p&gt;
&lt;p&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/springone2gx-2015-technical-keynote-day-two"&gt;http://www.slideshare.net/SpringCentral/springone2gx-2015-technical-keynote-day-two&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&#xD;
  &lt;iframe width="560" height="315" src="https://www.youtube.com/embed/M7qHt_hwDrk" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&#xD;
&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2015 Replay: Day 1 Keynote - Cloud Native Enterprise</title>
    <link rel="alternate" href="https://spring.io/blog/2015/10/19/springone2gx-2015-replay-day-1-keynote-cloud-native-enterprise" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-10-20:2263</id>
    <updated>2015-10-19T18:10:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2015.&lt;/p&gt;
&lt;p&gt;Speakers: Recorded at SpringOne2GX 2015.&#xD;
Speakers: James Watters, Josh Long, Dr. David Syer, Scott Frederick, Juergen Hoeller&lt;/p&gt;
&lt;p&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/springone2gx-2015-keynote-day-one"&gt;http://www.slideshare.net/SpringCentral/springone2gx-2015-keynote-day-one&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&#xD;
  &lt;iframe width="560" height="315" src="https://www.youtube.com/embed/171rFqarHj8" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&#xD;
&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2015 Replay: Spring Cloud at Netflix</title>
    <link rel="alternate" href="https://spring.io/blog/2015/10/19/springone2gx-2015-replay-spring-cloud-at-netflix" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-10-19:2262</id>
    <updated>2015-10-19T13:01:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2015.&lt;/p&gt;
&lt;p&gt;Speakers: Jon Schneider, Taylor Wicksell - Netflix&lt;/p&gt;
&lt;p&gt;Web / JavaScript Track&lt;/p&gt;
&lt;p&gt; Slides: &lt;a href="http://www.slideshare.net/SpringCentral/spring-cloud-at-netflix"&gt;http://www.slideshare.net/SpringCentral/spring-cloud-at-netflix&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Cloud Native Track&lt;br/&gt;Spring Cloud Netflix allows you to quickly take your existing Spring Boot application and transform it into a fully cloud-ready service (even if you are operating out of a private data center).&lt;br/&gt;This talk will be largely live coded, taking a simple Spring Boot app and progressively augmenting it with more and more production-ready features.&lt;br/&gt;1. Service discovery &amp;ndash; how we have extended Spring Cloud to integrate more seamlessly with Eureka.&lt;br/&gt;2. Real-time Metrics &amp;ndash; Spectator/Atlas integration, including how we fold Spring Boot Actuator metrics into Spectator. We will show you how to use the Atlas stack language to generate real-time metrics graphics.&lt;br/&gt;3. Inter-service Communication/Loading Balancing - When should you choose client-side load balancing (Ribbon) over traditional server-side load balancing? We will explain how Netflix OSS can contain both a client side load balancer in Ribbon and a software router in Zuul and when to use each.&lt;br/&gt;4. Managing Failure - Provide a demo of Hystrix/Spring integration with Turbine.&lt;br/&gt;5. Analytics - How Spring Cloud Netflix makes Spring XD an even more powerful real-time analytics platform with real-time operational insights.&lt;br/&gt;&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/6wvVANQ6EJ8" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;</content>
  </entry>
</feed>
