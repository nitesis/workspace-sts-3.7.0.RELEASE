<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Spring</title>
  <link rel="alternate" href="https://spring.io/blog" />
  <link rel="self" href="https://spring.io/blog.atom" />
  <id>http://spring.io/blog.atom</id>
  <icon>https://spring.io/favicon.ico</icon>
  <updated>2016-01-06T04:03:50Z</updated>
  <entry>
    <title>This Week in Spring - January 5th, 2016 (5th Anniversary Edition!)</title>
    <link rel="alternate" href="https://spring.io/blog/2016/01/06/this-week-in-spring-january-5th-2016-5th-anniversary-edition" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2016-01-06:2342</id>
    <updated>2016-01-06T04:03:50Z</updated>
    <content type="html">&lt;p&gt;Welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt; and welcome back from what I hope was a restive, fun new year!&lt;/p&gt;
&lt;p&gt;This week, we mark the fifth anniversary of &lt;em&gt;This Week in Spring&lt;/em&gt; which&lt;br/&gt;&lt;a href="https://twitter.com/devrelchap"&gt;Adam Fitzgerald&lt;/a&gt; and I started (based on some discussion with &lt;a href="https://twitter.com/kdonald"&gt;Keith Donald&lt;/a&gt; in January 2011) fresh from the 2010 holidays.&lt;/p&gt;
&lt;p&gt;Since then I&amp;rsquo;ve done my level-headed best to publish it &lt;em&gt;every week&lt;/em&gt; (no exceptions! no missed weeks!) before midnight in Hawaii on Tuesday, &lt;em&gt;every week&lt;/em&gt;, no matter what timezone I find myself in for that week! The world&amp;rsquo;s a big place, so from the perspective of someone sitting in, say, New York City, it may seem sometimes like this blog goes up midday Monday (00:00AM in various Asian countries) or early morning Wednesday (23:59 in Hawaii) - that&amp;rsquo;s a &lt;em&gt;lot&lt;/em&gt; of variability! But I assure, you it&amp;rsquo;s &lt;em&gt;always&lt;/em&gt; Tuesday when I post it!&lt;/p&gt;
&lt;p&gt;I post whenever I can get around to it. If I know I&amp;rsquo;ll be on a long 10-20hr plane ride I&amp;rsquo;ll make sure to pre-publish it or to schedule it if it&amp;rsquo;s still Monday wherever I am.&lt;/p&gt;
&lt;p&gt;In the beginning, &lt;a href="http://twitter.com/devrelchap"&gt;Adam Fitzgerald&lt;/a&gt; and, in the last few years, &lt;a href="http://twitter.com/PieterHumphrey"&gt;Pieter Humphrey&lt;/a&gt; have been invaluable in, among &lt;em&gt;many&lt;/em&gt; other things, making sure that the post isn&amp;rsquo;t missing a link or that I - in haste - didn&amp;rsquo;t fat finger something. Thanks gents, I truly couldn&amp;rsquo;t have done it without you!&lt;/p&gt;
&lt;p&gt;Of course, the biggest contributors to &lt;em&gt;This Week in Spring&lt;/em&gt; - and the reason I love doing it - is all of &lt;em&gt;you&lt;/em&gt;, the community, whose energy and enthusiasm drives you to go above and beyond; to write blogs, record talks, present slidedecks, and generally help spread mastery worldwide. THANK YOU SO MUCH! &lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s to many more installments and as always &lt;a href="http://twitter.com/starbuxman"&gt;don&amp;rsquo;t hesitate to ping me on Twitter (@starbuxman)&lt;/a&gt; with contributions, feedback or anything else.&lt;/p&gt;
&lt;p&gt;And now, with that out of the way, let&amp;rsquo;s get onto another content-packed roundup!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Cloud&amp;rsquo;s very own Marcin Grzejszczak has just posted a very nice piece on&lt;br/&gt; &lt;a href="http://spring.io/blog/2016/01/04/testing-spring-cloud-projects"&gt;testing Spring Cloud-based microservices&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring XD and Spring Cloud Data Flow lead Dr. Mark Pollack just &lt;a href="http://spring.io/blog/2015/12/29/spring-cloud-stream-1-0-m3-and-data-flow-1-0-m2-released"&gt;announced Spring Cloud Stream 1.0 M3 and Spring Cloud Data Flow 1.0 M2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Our pal &lt;a href="http://twitter.com/PieterHumphrey"&gt;Pieter Humphrey&lt;/a&gt;&amp;rsquo;s at it again and has thrown a lot of great content up from last year&amp;rsquo;s SpringOne2GX 2015. Let&amp;rsquo;s start with an introduction by Drs. Syer and Pollack to &lt;a href="http://spring.io/blog/2016/01/04/springone2gx-2015-replay-message-driven-microservices-in-the-cloud"&gt;message-driven microservices using Spring Cloud Stream, which underpins Spring Cloud Data Flow&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Want to learn Java 8 from a true master? Check out Dr. Venkat Subramaniam&amp;rsquo;s talk &lt;a href="http://spring.io/blog/2016/01/04/springone2gx-2015-replay-transforming-code-to-java-8"&gt;on Transforming Code to Java 8&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;This talk introduces &lt;a href="http://spring.io/blog/2016/01/04/springone2gx-2015-replay-introducing-rxjava-into-a-spring-boot-rest-api"&gt;how to think about RxJava with Spring Boot-based applications&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;let Spring Data ninja Christoph Strobl teach you how to &lt;a href="http://spring.io/blog/2016/01/04/springone2gx-2015-replay-boot-your-search-with-spring"&gt;introduce search functionality into your Spring Boot applications&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;check out Sarah Aerni, Srivatsan Ramanujam, and Jarrod Vawdrey&amp;rsquo;s talk on how to &lt;a href="http://spring.io/blog/2016/01/04/springone2gx-2015-replay-data-driven-action-a-primer-on-data-science"&gt;react to events in a data science solution&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Adam Koblentz and I did &lt;a href="http://spring.io/blog/2016/01/04/springone2gx-2015-replay-spring-boot-and-jrebel"&gt;a talk introducing how to use Spring Boot and JRebel&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Check out our very own &lt;a href="http://www.kennybastani.com/2016/01/spring-boot-graph-processing-microservices.html"&gt;Kenny Bastani&amp;rsquo;s introduction to using Neo4J and Spring to create a page rank engine to rank Twitter followers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I really dig this French-language slide deck from &lt;a href="https://speakerdeck.com/zianwar/introduction-to-maven-spring-and-spring-boot"&gt;Anwar Ziani introducing how to use Spring Boot and Maven&lt;/a&gt;. I got to the end of it only to realize he and I had met! (SMALL WORLD!) The one thing I&amp;rsquo;d change from the deck is the subtle implication that Spring (before Spring Boot) required XML, which is simply not true. It supported Java configuration. I haven&amp;rsquo;t used XML much at all in &lt;em&gt;years&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Mert Caliskan has put together &lt;a href="https://dzone.com/articles/bootiful-enterprise-applications-powered-by-spring"&gt;a nice post on deploying Spring Boot applications onto the Payara Micro application server&lt;/a&gt;. Payara is a GlassFish variant. It&amp;rsquo;s a good post but also mistakenly implies that Spring requires XML, which is just not true. Indeed, you can use Servlet 3.0, JPA, dependency injection and a slew of other Java EE technologies &lt;em&gt;without&lt;/em&gt; requisite Java EE XML files (why does this article have an emtpy &lt;code&gt;web.xml&lt;/code&gt;?) in basic Spring and Spring itself certainly doesn&amp;rsquo;t require XML. I&amp;rsquo;m also a little confused why this application didn&amp;rsquo;t simply use the typical Maven &lt;code&gt;pom.xml&lt;/code&gt; as generated from the Spring Initializr which, among other things, pre-configures Java 1.8 support. All that aside, it&amp;rsquo;s a nice article and interesting if you&amp;rsquo;re going that way!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(I &lt;em&gt;almost&lt;/em&gt; dated the post &lt;em&gt;2015&lt;/em&gt; by accident!)&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Testing Spring Cloud Projects</title>
    <link rel="alternate" href="https://spring.io/blog/2016/01/04/testing-spring-cloud-projects" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Marcin Grzejszczak</name>
    </author>
    <id>tag:spring.io,2016-01-03:2334</id>
    <updated>2016-01-04T17:21:01Z</updated>
    <content type="html">&lt;p&gt;Welcome to my first blog post as a Spring Cloud team member :)&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s been a month since I joined and it&amp;rsquo;s worth to share some of the interesting things that took place during that time.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;ve been reading any of my posts at my &lt;a href="http://toomuchcoding.blogspot.com"&gt;Too Much Coding blog&lt;/a&gt; then you know that I&amp;rsquo;m crazy about two things - testing and microservices. Since all that I do at the moment is microservice related today&amp;rsquo;s post will be about testing.&lt;/p&gt;&lt;h1&gt;&lt;a href="#the-spring-cloud-projects" class="anchor" name="the-spring-cloud-projects"&gt;&lt;/a&gt;The Spring Cloud projects&lt;/h1&gt;
&lt;p&gt;When I joined Spring Cloud team I did a quick scan of the Github and it turned out that we have quite a few projects to govern including:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-cloud/spring-cloud-netflix/"&gt;Spring Cloud Netflix&lt;/a&gt; (including Eureka Discovery Service and Registry, Hystrix, Feign and RIbbon support)&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-cloud/spring-cloud-zookeeper/"&gt;Spring Cloud Zookeeper&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-cloud/spring-cloud-consul"&gt;Spring Cloud Consul&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-cloud/spring-cloud-sleuth"&gt;Spring Cloud Sleuth&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of them depend on Spring and Spring Boot. Of course each of them has its own version. That&amp;rsquo;s a lot of interchanging dependencies, isn&amp;rsquo;t it?&lt;/p&gt;&lt;h1&gt;&lt;a href="#how-to-test-dependencies" class="anchor" name="how-to-test-dependencies"&gt;&lt;/a&gt;How to test dependencies?&lt;/h1&gt;
&lt;p&gt;I wanted to be sure that if someone changes something in Spring core or Spring Boot then we will immediately know that our libraries are still operational. Of course we could create a repetitive build on our CI tool but even though the integration tests would be passing - there is still a possibility of having issues with classpaths and JAR packaging. &lt;/p&gt;
&lt;p&gt;What I suggested was to write a couple of end to end tests&amp;hellip;&lt;/p&gt;
&lt;p&gt;Now whoever read this post of mine about &lt;a href="http://toomuchcoding.blogspot.com/2015/09/microservice-deployment.html"&gt;Microservice Deployment&lt;/a&gt; would say that I&amp;rsquo;ve gone crazy cause I was completely against end to end tests in that particular scenario. So what has changed?&lt;/p&gt;&lt;h2&gt;&lt;a href="#why-end-to-end-tests-were-a-good-idea" class="anchor" name="why-end-to-end-tests-were-a-good-idea"&gt;&lt;/a&gt;Why end to end tests were a good idea?&lt;/h2&gt;&lt;h3&gt;&lt;a href="#binary-approach-is-it-working-or-not" class="anchor" name="binary-approach-is-it-working-or-not"&gt;&lt;/a&gt;Binary approach - is it working or not?&lt;/h3&gt;
&lt;p&gt;With such a large number of projects, at this point in time I didn&amp;rsquo;t want to roam through all Github repositories, check their tests and reassure myself that everything is working fine. I wanted a black box solution that would tell me if the applications are working or not.&lt;/p&gt;&lt;h3&gt;&lt;a href="#cross-project-testing" class="anchor" name="cross-project-testing"&gt;&lt;/a&gt;Cross-project testing&lt;/h3&gt;
&lt;p&gt;The created applications would be using many different projects of ours. The end to end tests would pick any breaking changes in those.&lt;/p&gt;&lt;h3&gt;&lt;a href="#application-packaging" class="anchor" name="application-packaging"&gt;&lt;/a&gt;Application packaging&lt;/h3&gt;
&lt;p&gt;A couple of times I&amp;rsquo;ve checked the tests, did a &lt;code&gt;./gradlew bootRun&lt;/code&gt; and everything seemed to be working. Apart from the fact that &lt;code&gt;java -jar ...&lt;/code&gt; didn&amp;rsquo;t work cause the packaging was broken. I wanted to test that too.&lt;/p&gt;&lt;h3&gt;&lt;a href="#sample-of-usage" class="anchor" name="sample-of-usage"&gt;&lt;/a&gt;Sample of usage&lt;/h3&gt;
&lt;p&gt;I wanted to create a couple of projects that would present the way Spring Cloud could be used. I wanted to step into a new Spring Cloud user&amp;rsquo;s shoes and have a place where I can quickly set up the whole world of applications, infrastructure and click around to see what are the reactions.&lt;/p&gt;&lt;h1&gt;&lt;a href="#the-brewery-project" class="anchor" name="the-brewery-project"&gt;&lt;/a&gt;The Brewery project&lt;/h1&gt;
&lt;p&gt;Since I&amp;rsquo;ve been giving a number of &lt;a href="http://lanyrd.com/profile/marcin-grzejszczak/past/"&gt;talks about microservices&lt;/a&gt; I already had sample code prepared (kudos to &lt;a href="https://github.com/szimano"&gt;Szimano&lt;/a&gt; who is the co-author of the initial solution). I&amp;rsquo;ve tweaked it, bent it and hacked it and here came the &lt;a href="https://github.com/spring-cloud-samples/brewery"&gt;Brewery&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;&lt;a href="#the-high-overview" class="anchor" name="the-high-overview"&gt;&lt;/a&gt;The high overview&lt;/h2&gt;
&lt;p&gt;The overall idea is that there are 3 applications that talk to each other:&lt;br/&gt;- presenting service&lt;br/&gt;- brewing service&lt;br/&gt;- zuul service&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;presenting service&lt;/strong&gt; is a UI for the user where he can order ingredients for the beer to be brewed. It also has in its backend the statuses of brewing processes.&lt;/p&gt;
&lt;p&gt;Here is the UI of the service:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/spring-cloud-samples/brewery/master/img/Brewery_UI.png" alt="Diagram" /&gt;&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;brewing service&lt;/strong&gt; is a big application that is responsible for multiple functionalities. Initially it was split into a couple of microservices but for simplicity’s sake we decided to drop the number of deployable units. Coming back to the functionalities, these are:&lt;br/&gt;- collecting ingredients&lt;br/&gt;- maturing the beer&lt;br/&gt;- putting the beers into bottles&lt;br/&gt;- reporting (listening to the events in the system and putting them to an in memory data store)&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;zuul service&lt;/strong&gt; is just a Zuul router.&lt;/p&gt;
&lt;p&gt;The idea of this system is that all of the components are either using Service Discovery or Spring Cloud Stream to communicate between each other. &lt;/p&gt;
&lt;p&gt;Check out the &lt;a href="https://github.com/spring-cloud-samples/brewery/blob/master/README.md"&gt;Readme&lt;/a&gt; for more information about the project structure.&lt;/p&gt;&lt;h2&gt;&lt;a href="#re-usability" class="anchor" name="re-usability"&gt;&lt;/a&gt;Re-usability&lt;/h2&gt;
&lt;p&gt;What I wanted to achieve is re-usability. In order to test &lt;a href="https://github.com/spring-cloud/spring-cloud-sleuth"&gt;Spring Cloud Sleuth&lt;/a&gt; with &lt;a href="https://github.com/spring-cloud/spring-cloud-zookeeper/"&gt;Spring Cloud Zookeeper&lt;/a&gt; as Service Registry I didn&amp;rsquo;t want to change any code. Just wanted to run the tests with different parameters.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re using Spring Cloud abstractions to do that so if we change from Eureka to Consul then no code should change at all and the applications should still be able to communicate (it&amp;rsquo;s a matter of a JAR and configuration change). I wanted to test that too.&lt;/p&gt;&lt;h2&gt;&lt;a href="#conventions" class="anchor" name="conventions"&gt;&lt;/a&gt;Conventions&lt;/h2&gt;
&lt;p&gt;here are a bunch of conventions in the Brewery app. The main one is that you have a specific suffix to the &lt;code&gt;docker-compose&lt;/code&gt; yml files that corresponds to the tested functionality.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;docker-compose-CONSUL.yml&lt;/li&gt;
  &lt;li&gt;docker-compose-EUREKA.yml&lt;/li&gt;
  &lt;li&gt;docker-compose-SLEUTH_STREAM.yml&lt;/li&gt;
  &lt;li&gt;docker-compose-SLEUTH.yml&lt;/li&gt;
  &lt;li&gt;docker-compose-ZOOKEEPER.yml&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each of those docker-compose files knows how to run the whole world of applications and infrastructure to test the given functionality.&lt;/p&gt;&lt;h2&gt;&lt;a href="#how-to-run-the-apps" class="anchor" name="how-to-run-the-apps"&gt;&lt;/a&gt;How to run the apps?&lt;/h2&gt;
&lt;p&gt;First you have to build the apps and their Dockerfiles with Gradle. Also you have to pass the &lt;code&gt;WHAT_TO_TEST&lt;/code&gt; system parameter. Basing on that parameter the classpaths of applications are chosen. Example for &lt;code&gt;SLEUTH&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;./gradlew clean build -DWHAT_TO_TEST=SLEUTH --parallel
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once that&amp;rsquo;s done it&amp;rsquo;s enough to run the aforementioned bash script to run the required applications:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;docker-compose -f docker-compose-SLEUTH.yml up -d
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; : Sometimes the boot order matters so if you want to do things manually please check the corresponding bash file for the given functionality e.g. &lt;code&gt;docker-compose-SLEUTH.sh&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;In general it&amp;rsquo;s much better to boot the applications together with running the tests. How to do that? It&amp;rsquo;s just a one liner. Check out the next section for more information.&lt;/p&gt;&lt;h2&gt;&lt;a href="#how-to-run-the-tests" class="anchor" name="how-to-run-the-tests"&gt;&lt;/a&gt;How to run the tests?&lt;/h2&gt;
&lt;p&gt;Like the docs say:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;The easiest way is to:&lt;/p&gt;
  &lt;pre&gt;&lt;code class="prettyprint"&gt;Create a symbolic link somewhere on your drive to the acceptance-tests/scripts/runDockerAcceptanceTests.sh file.
You can execute that script with such options
    -t what do you want to test (SLEUTH, ZOOKEEPER etc.)
    -v in which version of the BOM (defaults to Brixton.BUILD-SNAPSHOT)
    -h where is your docker host? (defaults to &amp;#39;127.0.0.1&amp;#39; - provide your docker-machine host here)
    -r is brewery repo already in place and needs to be reset? (defaults to not resetting of repo)
&lt;/code&gt;&lt;/pre&gt;
  &lt;p&gt;Once you run the script, the brewery app will be cloned, built with proper lib versions and proper tests will be executed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So if you want to run the tests just copy paste the code below:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;git clone https://github.com/spring-cloud-samples/brewery.git&#xD;
ln -s brewery/acceptance-tests/scripts/runDockerAcceptanceTests.sh  .&#xD;
bash runDockerAcceptanceTests.sh -t SLEUTH
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;if you&amp;rsquo;re a Mac user the last line should be sth like this (e.g. 192.168.50.60 being your docker-machine IP)&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;bash runDockerAcceptanceTests.sh -t SLEUTH -h 192.168.50.60
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you have your dependencies downloaded all the building, downloading and running of tests should take up to 5 minutes.&lt;/p&gt;
&lt;p&gt;If you have all the applications already setup you can run the acceptance tests manually. Check the next section for more information about this.&lt;/p&gt;&lt;h2&gt;&lt;a href="#how-do-the-tests-look-like-and-how-to-run-them" class="anchor" name="how-do-the-tests-look-like-and-how-to-run-them"&gt;&lt;/a&gt;How do the tests look like and how to run them?&lt;/h2&gt;
&lt;p&gt;The acceptance tests are present under the &lt;a href="https://github.com/spring-cloud-samples/brewery/tree/master/acceptance-tests"&gt;acceptance-tests&lt;/a&gt; Gradle module of brewery. You can run them either&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;from IDE (remember to pass proper &lt;code&gt;-DWHAT_TO_TEST&lt;/code&gt; system parameter)&lt;/li&gt;
  &lt;li&gt;from Gradle (example for SLEUTH) &lt;code&gt;./gradlew :acceptance-tests:acceptanceTests -DWHAT_TO_TEST=SLEUTH&lt;/code&gt;)
    &lt;ul&gt;
      &lt;li&gt;if you&amp;rsquo;re running on Mac you have to pass additionally the &lt;code&gt;-DLOCAL_URL=192.168.60.50&lt;/code&gt; parameter where &lt;code&gt;192.168.60.50&lt;/code&gt; is the IP of your docker-machine.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The tests are written in Groovy with &lt;a href="http://spockframework.github.io/spock/docs/1.0/"&gt;Spock framework &lt;/a&gt;. If you have never heard of Spock it&amp;rsquo;s high time that you start using it in your project. Check out the &lt;a href="https://github.com/spring-cloud-samples/brewery/blob/master/acceptance-tests/src/test/groovy/io/spring/cloud/samples/brewery/acceptance/SleuthBreweryAcceptanceSpec.groovy"&gt;Github code&lt;/a&gt; with an example of a Spock test used in the Brewery.&lt;/p&gt;
&lt;p&gt;If you combine Spock with &lt;a href="https://github.com/renatoathaydes/spock-reports"&gt;Spock-reports&lt;/a&gt; then you can get a very nice BDD like output of your tests&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/spring-cloud-samples/brewery/master/img/Spock_reports.png" alt="spock_reports" /&gt;&lt;/p&gt;&lt;h1&gt;&lt;a href="#are-end-to-end-tests-a-silver-bullet" class="anchor" name="are-end-to-end-tests-a-silver-bullet"&gt;&lt;/a&gt;Are end to end tests a silver bullet?&lt;/h1&gt;
&lt;p&gt;It would seem that everything is awesome but actually it&amp;rsquo;s not. The end to end tests have their good sides but they also definitely have a lot of down sides. Those are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;long feedback cycle (you have to wait around 5 minutes to see if your tests pass)&lt;/li&gt;
  &lt;li&gt;hard to debug (you have around 8 applications that can break - you have to check the logs of each application to see what went wrong)&lt;/li&gt;
  &lt;li&gt;network issues and random failures (this is the worst case cause often it&amp;rsquo;s random - suddenly a packet was broken and the Zipkin Server hasn&amp;rsquo;t received a span that was crucial for the tests to pass&amp;hellip;)&lt;/li&gt;
  &lt;li&gt;testing code lives outside the tested library (fortunately the testing code doesn&amp;rsquo;t change but it&amp;rsquo;s much better to have all the code related to an application be in one repository)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The current setup suits our needs but in fact we want things to improve even further. That&amp;rsquo;s why we&amp;rsquo;re thinking about a couple of improvements to the current test approach.&lt;/p&gt;&lt;h1&gt;&lt;a href="#what-rsquo-s-next" class="anchor" name="what-rsquo-s-next"&gt;&lt;/a&gt;What&amp;rsquo;s next?&lt;/h1&gt;
&lt;p&gt;Currently the end to end tests are executed together with the build on Travis. But&amp;hellip;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;eventually we&amp;rsquo;re planning to make those tests run in our CI server only on a recurring basis.&lt;/li&gt;
  &lt;li&gt;we&amp;rsquo;re going to move parts of the end to end tests as integration tests to the given libraries so that it will be much easier to debug any issues&lt;/li&gt;
  &lt;li&gt;we want to extend our tests so that they are executed also on Cloud Foundry&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The intent is to have faster feedback from our tests that are executed from the library&amp;rsquo;s codebase. Also we want our integration tests to be more reliable.&lt;/p&gt;&lt;h1&gt;&lt;a href="#summary" class="anchor" name="summary"&gt;&lt;/a&gt;Summary&lt;/h1&gt;
&lt;p&gt;In this post you could see:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;how to brew beer&lt;/li&gt;
  &lt;li&gt;an approach to testing Open Source libraries using Docker, Docker Compose, Travis, Bash scripts and Gradle&lt;/li&gt;
  &lt;li&gt;the pros and cons of end to end testing&lt;/li&gt;
  &lt;li&gt;what are the long term plans of Spring Cloud team towards testing their libraries&lt;/li&gt;
  &lt;li&gt;agile way of working (we have an approach to testing - the e2e tests - but we know its downsides and we&amp;rsquo;re iteratively planning to migrate to a better solution)&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2015 replay: Spring Boot and JRebel</title>
    <link rel="alternate" href="https://spring.io/blog/2016/01/04/springone2gx-2015-replay-spring-boot-and-jrebel" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2016-01-05:2341</id>
    <updated>2016-01-04T17:05:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2015.&lt;br/&gt;Track: Core Spring&lt;br/&gt;Speakers: Adam Koblentz and Josh Long&lt;br/&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/springboot-jrebel-cf"&gt;http://www.slideshare.net/SpringCentral/springboot-jrebel-cf&lt;/a&gt;&lt;br/&gt;Abstract:&lt;br/&gt;Spring Boot, the new convention-over-configuration centric framework from the Spring team at Pivotal, marries Spring&amp;rsquo;s flexibility with conventional, common sense defaults to make application development not just fly, but pleasant! Spring Boot gives you a huge leg up over normal starter projects, now let&amp;rsquo;s give you another boost by adding JRebel. With JRebel, the average Java developer saves over 1 work-month per year by using JRebel to skip rebuild, restart, and redeploys of their application. With Boot and JRebel, developers can get up and running and then stay focused on doing what&amp;rsquo;s important: writing kick-ass applications. In this session, developers will learn about spring boot and how to go from nothing to a fully functioning app in no time, then see how they can keep the app up and reload code changes instantly without redeploying and stay in the flow.&lt;br/&gt;&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/HoTzj6sjQ6Q" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2015 replay: Data Driven Action: a primer on Data Science</title>
    <link rel="alternate" href="https://spring.io/blog/2016/01/04/springone2gx-2015-replay-data-driven-action-a-primer-on-data-science" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2016-01-05:2340</id>
    <updated>2016-01-04T16:59:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2015.&lt;br/&gt;Track: Big Data&lt;br/&gt;Speakers: Sarah Aerni, Srivatsan Ramanujam, Jarrod Vawdrey&lt;br/&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/data-driven-action-a-primer-on-data-science"&gt;http://www.slideshare.net/SpringCentral/data-driven-action-a-primer-on-data-science&lt;/a&gt;&lt;br/&gt;Abstract:&lt;br/&gt;In all industries, as software is eating the world, data is feeding software. However, to truly get value out of the data being generated, it must be analyzed and made actionable. Transformation in many industries actually means precisely this, data-driven action. From creating new television shows, to smart devices that help make your life easy, save precious limited resources, or protect your health, ingesting the data and building models are crucial to success.&lt;br/&gt;This session will focus on examples of how these models are built. What is required to build a model? How does data need to be processed? What do you have to consider to make your model effective? And finally what tools do I use to build these models?&lt;br/&gt;In this session, we will address these questions through illustrative use cases using open-source technologies varying from medical, text and sensor data, from three different speakers:&lt;br/&gt;- Approaches and Open Source Tools for Wrangling and Modeling Massive Datasets&lt;br/&gt;- Scaling Java Applications for NLP on MPP through PL/Java&lt;br/&gt;- A Scalable Framework For Realtime Monitoring &amp;amp; Prediction Of Sensor Readings&lt;br/&gt;&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/BZLvKbtnCpw" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2015 replay: Boot your search with Spring</title>
    <link rel="alternate" href="https://spring.io/blog/2016/01/04/springone2gx-2015-replay-boot-your-search-with-spring" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2016-01-05:2339</id>
    <updated>2016-01-04T16:56:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2015&lt;br/&gt;Track: Data / Integration&lt;br/&gt;Speaker: Christoph Strobl&lt;br/&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/boot-your-search-with-spring"&gt;http://www.slideshare.net/SpringCentral/boot-your-search-with-spring&lt;/a&gt;&lt;br/&gt;Abstract:&lt;br/&gt;Search has become a major part in our applications. We want to find, quick and easy! This session focuses on integrating search solutions like Solr, Elasticsearch as well as MongoDBs full text search into your application. We’ll have a look on Spring Data’s abstraction for those and do some hands on auto configuration using Spring Boot (100% XML free setup guaranteed).&lt;br/&gt;&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/rf3aQRYxLBs" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2015 replay: Introducing RxJava into a Spring Boot REST API</title>
    <link rel="alternate" href="https://spring.io/blog/2016/01/04/springone2gx-2015-replay-introducing-rxjava-into-a-spring-boot-rest-api" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2016-01-05:2337</id>
    <updated>2016-01-04T16:35:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2015&lt;br/&gt;Speakers: Simon Baslé, Laurent Doguin&lt;br/&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/practical-rxjava"&gt;http://www.slideshare.net/SpringCentral/practical-rxjava&lt;/a&gt;&lt;br/&gt;Web / JavaScript Track&lt;br/&gt;RxJava is an awesome library for async data streams. It is both expressive and powerful but the learning curve can be quite steep at first. So we want to quickstart developers into the world of Reactive eXtensions with more context than just listing operators!&lt;br/&gt;Adapted from a hands-on workshop, this talk will describe how one can migrate code into a fully async and RxJava-based application, built upon Spring Boot and Java 8.&lt;br/&gt;What kind of changes does this require? What shifts in thinking? What are the traps and pitfalls to avoid? Hopefully you&amp;rsquo;ll learn the answers to these questions in this talk!&lt;br/&gt;&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/QOR69q1e63Y" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2015 replay: Transforming code to Java 8</title>
    <link rel="alternate" href="https://spring.io/blog/2016/01/04/springone2gx-2015-replay-transforming-code-to-java-8" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2016-01-05:2336</id>
    <updated>2016-01-04T16:34:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2015&lt;br/&gt;Speaker: Dr. Venkat Subramaniam&lt;br/&gt;Slides: No slides, all demo&lt;br/&gt;The new facilities in Java 8 is about the change the way we write code. Our code will become more expressive and concise. But, exactly how?&lt;br/&gt;&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/wk3WLaR2V2U" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2015 replay: Message Driven Microservices in the Cloud</title>
    <link rel="alternate" href="https://spring.io/blog/2016/01/04/springone2gx-2015-replay-message-driven-microservices-in-the-cloud" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2016-01-05:2335</id>
    <updated>2016-01-04T16:29:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2015&lt;br/&gt;Speakers: Dr. David Syer, Dr. Mark Pollack&lt;br/&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/message-driven-microservices-in-the-cloud"&gt;http://www.slideshare.net/SpringCentral/message-driven-microservices-in-the-cloud&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Do you need to build cloud-native microservices for distributed stream processing and data integration but don&amp;rsquo;t know where to start? All you need is a single annotation in your code and a single dependency in your POM. The new Spring Cloud Stream project combines the power of Spring Boot, Spring Integration, and Spring Cloud to make that a reality.&lt;/p&gt;
&lt;p&gt;In a nutshell, Spring Cloud Stream provides support for auto-configuration of Spring Integration capabilities, such as Channel Adapters for Kafka, RabbitMQ and Redis. The apps you build sit on a profile-driven foundation that ensures portability across runtime environments from your laptop to the cloud. Once you scale those distributed apps, you&amp;rsquo;ll appreciate the integrated Spring Cloud features such as service discovery and configuration management.&lt;/p&gt;
&lt;p&gt;This session will feature a series of live demos on different platforms ranging from local to a remote Cloud to show the simplicity of the Spring Cloud Stream developer experience. We will also dive into the details of what&amp;rsquo;s happening behind the scenes. There will be stories about the background of how this project got started and its relevance for the evolution of Spring XD, as the latter has itself embarked on a cloud-native microservice journey.&lt;br/&gt;The third platform, characterized by a fluid infrastructure where virtualized servers come into and out of existence, and workloads are constantly being moved about and scaled up and down to meet variable demand, calls for new design patterns, processes and even culture. One of the most well known descriptions of these new paradigms is the Twelve Factor App (12factor.net), which describes elements of cloud native applications. Many of these needs are squarely met through the Spring Framework, others require support from other systems. In this session we will examine each of the twelve factors and present how Spring, and platforms such as Cloud Foundry satisfy them, and in some cases we’ll even suggest that responsibility should shift from Spring to platforms. At the conclusion you will understand what is needed for cloud-native applications, why and how to deliver on those requirements.&lt;br/&gt;&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/_oV2dia0fy4" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Cloud Stream 1.0 M3 and Data Flow 1.0 M2 released</title>
    <link rel="alternate" href="https://spring.io/blog/2015/12/29/spring-cloud-stream-1-0-m3-and-data-flow-1-0-m2-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Mark Pollack</name>
    </author>
    <id>tag:spring.io,2015-12-29:2333</id>
    <updated>2015-12-29T22:11:43Z</updated>
    <content type="html">&lt;p&gt;On behalf of the team, I am pleased to announce several releases in the Spring Cloud Stream and Spring Cloud Data Flow family of projects.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://docs.spring.io/spring-cloud-stream/docs/1.0.0.M3/reference/html/"&gt;Spring Cloud Stream 1.0 M3&lt;/a&gt; introduces the following features&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Many improvements in middleware binding. In particular for supporting &lt;a href="http://docs.spring.io/spring-cloud-stream/docs/1.0.0.M3/reference/html/spring-cloud-stream-overview.html#_multiple_binders_on_the_classpath"&gt;multiple binders&lt;/a&gt;, so you can now have RabbitMQ as an input and Kafka be the output, for example.&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://docs.spring.io/spring-cloud-stream/docs/1.0.0.M3/reference/htmlsingle/#_partitioning"&gt;Partitioning improvements&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://docs.spring.io/spring-cloud-stream-modules/docs/1.0.0.M2/reference/html/"&gt;Spring Cloud Stream Modules 1.0 M2&lt;/a&gt; adds many new modules with updated documentation.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Sources: File, Load Generator, sftp, and tcp&lt;/li&gt;
  &lt;li&gt;Processors: httpclient, PMML, and Splitter&lt;/li&gt;
  &lt;li&gt;Sinks: Cassandra, Field Value Counter, file, ftp, gemfire, HDFS Dataset, JDBC, tcp, throughput, and websocket&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://docs.spring.io/spring-cloud-dataflow/docs/1.0.0.M2/reference/htmlsingle/#_deploying_local"&gt;Spring Cloud Data Flow 1.0 M2&lt;/a&gt; has split out the multiple Admin Server implementations into separate github repositories. The Spring Cloud Data Flow core project supports deploying modules on a local host in separate JVMs&lt;/p&gt;
&lt;p&gt;The following Data Flow implementations were also released&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://docs.spring.io/spring-cloud-dataflow-admin-yarn/docs/1.0.0.M1/reference/html/_deploying_on_yarn.html"&gt;Data Flow Apache YARN 1.0 M1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://docs.spring.io/spring-cloud-dataflow-admin-cloudfoundry/docs/1.0.0.M1/reference/htmlsingle/#getting-started"&gt;Data Flow Cloud Foundry 1.0 M1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://docs.spring.io/spring-cloud-dataflow-admin-mesos/docs/1.0.0.M1/reference/htmlsingle/#_deploying_streams_on_mesos_and_marathon"&gt;Data Flow Apache Mesos 1.0 M1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://docs.spring.io/spring-cloud-dataflow-admin-kubernetes/docs/1.0.0.M1/reference/htmlsingle/#_deploying_streams_on_kubernetes"&gt;Data Flow Kubernetes 1.0 M1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;UI Improvements&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The Admin UI is available across all Admin implementations.&lt;/li&gt;
  &lt;li&gt;The Admin UI adds a new Runtime Modules tab that allows you to remotely monitor and manage deployed modules.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://network.pivotal.io/products/p-flo-for-spring-cloud-data-flow"&gt;Flo for Spring Cloud Data Flow 1.0 M1&lt;/a&gt; is now available with drag-and-drop support for creating Streams.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is also a new &lt;a href="https://github.com/spring-cloud/spring-cloud-dataflow-samples"&gt;Data Flow Samples repository&lt;/a&gt; to collect some common use-cases, and look forward to a blog post on how to get started on creating your own custom modules and deploying them in Spring Cloud Data Flow.&lt;/p&gt;
&lt;p&gt;Of note, we are using github issues with waffle.io for issue management. Links to the waffle boards are on each project’s github page. You can find the links to each github project page under the main &lt;a href="http://cloud.spring.io/spring-cloud-dataflow/"&gt;Spring Cloud Data Flow&lt;/a&gt; project page.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>This Year in Spring - December 29, 2015</title>
    <link rel="alternate" href="https://spring.io/blog/2015/12/29/this-year-in-spring-december-29-2015" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2015-12-29:2332</id>
    <updated>2015-12-29T08:00:00Z</updated>
    <content type="html">&lt;p&gt;Welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt; where, with 2016&lt;br/&gt;just around the corner, we&amp;rsquo;ll look at some interesting news from the last week&lt;br/&gt;&lt;em&gt;and&lt;/em&gt; we&amp;rsquo;ll take a moment to review another amazing year in the Spring and Pivotal ecosystem.&lt;/p&gt;
&lt;p&gt;Now let&amp;rsquo;s look at an short-and-sweet list of the latest-and-greatest from the last week:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Got a Amazon.com gift card burning a hole in your pocket from the holidays?&lt;br/&gt; Well, fret not, I&amp;rsquo;ve got just the thing for you! At long last, &lt;a href="http://twitter.com/habuma"&gt;Spring legend Craig Walls&lt;/a&gt;&amp;rsquo; epic&lt;br/&gt; &lt;a href="http://www.amazon.com/Spring-Boot-Action-Craig-Walls/dp/1617292540"&gt;&lt;em&gt;Spring Boot in Action&lt;/em&gt;&lt;/a&gt; is available! Get it while it&amp;rsquo;s hot! GO GO GO!&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/Netflix/genie"&gt;Netflix&amp;rsquo;s Genie&lt;/a&gt;, which is &lt;a href="http://techblog.netflix.com/2014/11/genie-20-second-wish-granted.html"&gt;a job scheduling and resource management layer&lt;/a&gt;&lt;br/&gt; for big-data jobs based on Spring Boot has just recently &lt;a href="https://github.com/Netflix/genie/commit/972bac63f2bcb595c3e1d36833e9b7fe31ace5da"&gt;cut over from Swagger to Spring REST Docs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Christoph Burmeister put together an introduction to building &lt;a href="http://christoph-burmeister.eu/?p=2849"&gt;a fullstack web application with Spring Boot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;This Portuguse-language post looks at starting a new project &lt;a href="http://www.k19.com.br/artigos/primeira-aplicacao-com-spring-mvc-e-spring-boot/"&gt;using the Spring Tool Suite and Spring Boot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;This Spanish-language post looks at &lt;a href="http://www.albertcoronado.com/2015/12/24/aplicaciones-web-con-spring-boot-spring-security-y-gradle/"&gt;how to stand up a Spring Boot web application with Thymeleaf views, secured with Spring Security&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;This Chinese language post &lt;em&gt;also&lt;/em&gt; looks at how to &lt;a href="http://blog.csdn.net/isea533/article/details/50278205"&gt;get started with Spring Boot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;our pal Petri Kainulainen is back at it again, this time with a &lt;a href="http://www.petrikainulainen.net/programming/spring-framework/spring-from-the-trenches-creating-pdf-documents-with-wkhtmltopdf/"&gt;post on using Spring Boot to &lt;em&gt;generate&lt;/em&gt; &lt;code&gt;.pdf&lt;/code&gt; documents by shelling out to &lt;code&gt;wkhtmltopdf&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Jakub Narloch has a nice post on &lt;a href="https://jmnarloch.wordpress.com/2015/12/23/spring-cloud-zuul-trie-matcher/"&gt;using Spring Cloud Zuul to create a Trie matcher&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Simon Baslé&amp;rsquo;s just announced the first release candidate of &lt;a href="http://blog.couchbase.com/2015/december/spring-data-couchbase-2.0-release-candidate-quickannounce"&gt;Spring Data Couchbase 2.0&lt;/a&gt;!&lt;br/&gt; Get the bits and kick the tires while you can! The corresponding PR for support &lt;a href="https://github.com/spring-projects/spring-boot/pull/3499"&gt;for Spring Data Couchbase in Spring Boot has also been updated&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Check out this post to &lt;a href="http://www.blogjava.net/17learning/archive/2015/12/28/428853.html"&gt;learn how to use the community project, Spring Data JDBC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It&amp;rsquo;s helpful to keep things in perspective; while every week has brought us &lt;em&gt;something&lt;/em&gt; interesting, some things stand above the rest and are worth revision here, in &lt;em&gt;This Year in Spring&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;in April of this year, &lt;a href="https://spring.io/blog/2015/03/04/spring-cloud-1-0-0-available-now"&gt;we announced &lt;strong&gt;Spring Cloud 1.0&lt;/strong&gt;&lt;/a&gt; complete with support for service registration and discovery, client-side load-balancing, circuit breakers, microproxies, and &lt;em&gt;so much more&lt;/em&gt;. Spring Cloud builds on Spring Boot and has been embraced wholeheartedly (and publicly) by the likes of Netflix, TicketMaster, Alibaba, and many more.&lt;/li&gt;
  &lt;li&gt;just before SpringOne2GX 2015, we announced &lt;a href="http://cloud.spring.io/spring-cloud-dataflow/"&gt;&lt;strong&gt;Spring Cloud Data Flow&lt;/strong&gt;&lt;/a&gt;, the decomposition of the technology in Spring XD into small, Spring Boot-based microservices and auto-configuration. Spring Cloud Data Flow builds on top of Spring Cloud Stream, Spring Data and Spring Batch to easily compose and control big data jobs and streams.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2015/11/16/spring-boot-1-3-0-released"&gt;&lt;strong&gt;Spring Boot 1.3&lt;/strong&gt; was released&lt;/a&gt; almost a year after the release of Spring Boot 1.2, in November 2014. The release is &lt;em&gt;packed&lt;/em&gt; with all sorts of new features including numerous new auto-configurations, strong support development-time conveniences like live reloading and, of course, &lt;a href="http://stackoverflow.com/questions/33797009/how-to-change-spring-boot-logo-to-nyan-cat"&gt;the amazing color banner ASCII artwork&lt;/a&gt;!&lt;/li&gt;
  &lt;li&gt;In November we released &lt;a href="https://blog.pivotal.io/pivotal-cloud-foundry/products/pivotal-cloud-foundry-1-6-now-available"&gt;the long-awaited &lt;strong&gt;Pivotal Cloud Foundry 1.6&lt;/strong&gt;&lt;/a&gt; which builds on the latest and greatest improvements to the Cloud Foundry OSS code, including the Diego scheduler which supports running Windows- and Docker-based workloads, and adds in the powerful Spring Cloud Services which make it dead simple to standup infrastructure like service registries and configuration services, among other things.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/pivotal-cf/micropcf"&gt;We announced &lt;strong&gt;MicroPCF&lt;/strong&gt;&lt;/a&gt;, which is the simplest way to get a local-node Pivotal Cloud Foundry-like experience that&amp;rsquo;s familiar for developers and administrators alike&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks for tuning in and don&amp;rsquo;t forget to join us again next week where we&amp;rsquo;ll kick off the new year and mark five years of &lt;em&gt;This Week in Spring&lt;/em&gt;! &lt;/p&gt;
&lt;p&gt;On behalf of the Spring and Pivotal teams, HAPPY NEW YEAR!&lt;/p&gt;
&lt;p&gt;** &lt;span style="font-size: smaller"&gt;No ninjas were harmed in the making of &lt;em&gt;This Week in Spring&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - December 22, 2015</title>
    <link rel="alternate" href="https://spring.io/blog/2015/12/22/this-week-in-spring-december-22-2015" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2015-12-22:2330</id>
    <updated>2015-12-22T15:38:00Z</updated>
    <content type="html">&lt;p&gt;Welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt;! This week, many of us will be off for the Christmas holiday. If you celebrate, then let me wish you the Merriest of Christmases from our team. If you don&amp;rsquo;t celebrate, we&amp;rsquo;ll see you next week as we look at our annual &lt;em&gt;This Year in Spring!&lt;/em&gt; and welcome 2016!&lt;/p&gt;
&lt;p&gt;Holiday or not, there&amp;rsquo;s a lot of great stuff to read this week so let&amp;rsquo;s get to it! &lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;If you&amp;rsquo;re using Spring Cloud Eureka and Jersey you may run into issues because Eureka itself uses Jersey 1.x where as Spring Boot&amp;rsquo;s Jersey support is based on Jersey 1. Read how &lt;a href="https://staleks.github.io/blog/2015/12/20/index.html"&gt;Aleksandar Stoisavljevic solved it&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
  &lt;li&gt;Spring framework lead Juergen Hoeller has announced that &lt;a href="http://spring.io/blog/2015/12/17/spring-framework-4-2-4-4-1-9-released"&gt;Spring Framework 4.2.4 and 4.1.9 have been released&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring framework contributor Stéphane Nicoll has &lt;a href="http://spring.io/blog/2015/12/17/spring-framework-3-2-16-available-now"&gt;just announced that Spring Framework 3.2.16 is now available&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Boot contributor Stéphane Nicoll &lt;em&gt;also&lt;/em&gt; announced &lt;a href="http://spring.io/blog/2015/12/18/spring-boot-1-3-1-and-1-2-8-available-now"&gt;that Spring Boot 1.3.1 and 1.2.8 are now available, as well&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data lead Oliver Gierke has just announced &lt;a href="http://spring.io/blog/2015/12/18/spring-data-release-train-gosling-sr2-released"&gt;that Spring Data relese train Gosling SR2 is now available, as well&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring IO Platform lead Andy Wilkinson has just announced &lt;a href="http://spring.io/blog/2015/12/18/spring-io-platform-1-1-5-release"&gt;1.1.5&lt;/a&gt; and &lt;a href="http://spring.io/blog/2015/12/18/spring-io-platform-2-0-1-release"&gt;2.0.1&lt;/a&gt; are now available&lt;/li&gt;
  &lt;li&gt;Do you want build multitenancy into your system? Consider using &lt;a href="https://stormpath.com/blog/idsite-multi-tenancy/"&gt;the Stormpath Identity provider which features a very powerful Spring Boot auto-configuration&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;our pal Biju Kunjummen is back at it again, this time with a post on &lt;a href="http://www.javacodegeeks.com/2015/12/spring-cloud-rest-client-netflix-ribbon-basics.html"&gt;using Spring Cloud&amp;rsquo;s auto-configured &lt;code&gt;RestTemplate&lt;/code&gt; with Ribbon&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;this week, Pivotal announced the acquisition &lt;a href="https://blog.pivotal.io/pivotal-cloud-foundry/news/pivotal-acquires-cloudcredo"&gt;of longtime Cloud Foundry partner Cloud Credo&lt;/a&gt;: welcome aboard!&lt;/li&gt;
  &lt;li&gt;this post by Nedim Šabić has a nice look at various approaches to &lt;a href="http://rabbitstack.github.io/cloud/microservices/spring/a-pragmatic-approach-to-migration-from-monolithic-to-microservices/"&gt;implementing microservices using Spring Cloud and Go&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Voxxed has an interesting post by Holger Steinhauer &lt;a href="https://www.voxxed.com/blog/2015/12/10729/"&gt;that introduces a simple Spring Boot application&lt;/a&gt; that leverages Spring MVC, Spring Data, JPA, operationalize it using the Spring Boot actuator, add a template, and so much more.&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>Spring for Apache Hadoop 2.3.0 GA released</title>
    <link rel="alternate" href="https://spring.io/blog/2015/12/22/spring-for-apache-hadoop-2-3-0-ga-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Thomas Risberg</name>
    </author>
    <id>tag:spring.io,2015-12-22:2331</id>
    <updated>2015-12-22T15:32:00Z</updated>
    <content type="html">&lt;p&gt;We are pleased to announce the Spring for Apache Hadoop 2.3.0 GA release.&lt;/p&gt;
&lt;p&gt;Spring for Apache Hadoop 2.3 adds the following new features and improvements:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Added support for Hive 1.x and updated HiveTemplate to work with HiveServer2&lt;/li&gt;
  &lt;li&gt;New batch tasklet for Apache Spark, see docs for a usage &lt;a href="http://docs.spring.io/spring-hadoop/docs/2.3.0.RELEASE/reference/html/springandhadoop-spark.html"&gt;example&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Added FlushTimeoutTrigger to StoreObjectSupport to allow to flush to disk during writes&lt;/li&gt;
  &lt;li&gt;Replaced internal state machine implementation with new &amp;ldquo;spring-statemachine&amp;rdquo; project&lt;/li&gt;
  &lt;li&gt;Added jobHistoryAddress to SpringHadoopProperties for Boot configuration&lt;/li&gt;
  &lt;li&gt;Update build to use Spring Framework 4.2.4, Spring Batch 3.0.6.RELEASE, Spring Boot 1.3.1.RELEASE and Spring Integration 4.2.4.RELEASE.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See the release &lt;a href="http://docs.spring.io/spring-hadoop/docs/2.3.0.RELEASE/changelog.txt"&gt;changelog&lt;/a&gt; for details.&lt;/p&gt;
&lt;p&gt;We continue to provide version specific artifacts with their respective transitive dependencies in the Spring IO milestone repository:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;2.3.0.RELEASE (default - Apache Hadoop stable 2.7.1)&lt;/li&gt;
  &lt;li&gt;2.3.0.RELEASE-hadoop26 (Apache Hadoop 2.6.0)&lt;/li&gt;
  &lt;li&gt;2.3.0.RELEASE-phd30 (Pivotal HD 3.0)&lt;/li&gt;
  &lt;li&gt;2.3.0.RELEASE-phd21 (Pivotal HD 2.1)&lt;/li&gt;
  &lt;li&gt;2.3.0.RELEASE-cdh5 (Cloudera CDH 5.4)&lt;/li&gt;
  &lt;li&gt;2.3.0.RELEASE-hdp23 (Hortonworks HDP 2.3)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please provide feedback so we can prioritize the work on new features scheduled for 2.4. You can use JIRA issues or GitHub issues (see project page for links).&lt;/p&gt;
&lt;p&gt;The project page is at - &lt;a href="http://projects.spring.io/spring-hadoop/"&gt;http://projects.spring.io/spring-hadoop/&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring IO Platform 2.0.1.RELEASE</title>
    <link rel="alternate" href="https://spring.io/blog/2015/12/18/spring-io-platform-2-0-1-release" />
    <category term="releases" label="Releases" />
    <author>
      <name>Andy Wilkinson</name>
    </author>
    <id>tag:spring.io,2015-12-18:2329</id>
    <updated>2015-12-18T19:01:07Z</updated>
    <content type="html">&lt;p&gt;&lt;a href="http://platform.spring.io/platform"&gt;Spring IO Platform&lt;/a&gt; 2.0.1.RELEASE is now available from both &lt;a href="http://repo.spring.io/release"&gt;repo.spring.io&lt;/a&gt; and &lt;a href="http://search.maven.org/#search%7Cga%7C1%7Cg%3Aio.spring.platform"&gt;Maven Central&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;This maintenance release upgrades the versions of a number of the projects in the Platform to pick up their latest maintenance releases:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Reactor 2.0.7.RELEASE&lt;/li&gt;
  &lt;li&gt;Spring Batch 3.0.6.RELEASE&lt;/li&gt;
  &lt;li&gt;Spring Boot 1.3.1.RELEASE&lt;/li&gt;
  &lt;li&gt;Spring Cloud Connectors 1.2.1.RELEASE&lt;/li&gt;
  &lt;li&gt;Spring Framework 4.2.4.RELEASE&lt;/li&gt;
  &lt;li&gt;Spring Data Gosling SR2A&lt;/li&gt;
  &lt;li&gt;Spring Integration 4.2.4.RELEASE&lt;/li&gt;
  &lt;li&gt;Spring Integration Kafka 1.2.1.RELEASE&lt;/li&gt;
  &lt;li&gt;Spring REST Docs 1.0.1.RELEASE&lt;/li&gt;
  &lt;li&gt;Spring Social 1.1.4.RELEASE&lt;/li&gt;
  &lt;li&gt;Spring Social Facebook 2.0.3.RELEASE&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The versions of many third-party dependencies have also been updated.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://platform.spring.io/platform"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-io/platform"&gt;GitHub&lt;/a&gt; | &lt;a href="https://github.com/spring-io/platform/issues"&gt;Issues&lt;/a&gt; | &lt;a href="http://docs.spring.io/platform/docs/2.0.1.RELEASE/reference/htmlsingle"&gt;Documentation&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring IO Platform 1.1.5.RELEASE</title>
    <link rel="alternate" href="https://spring.io/blog/2015/12/18/spring-io-platform-1-1-5-release" />
    <category term="releases" label="Releases" />
    <author>
      <name>Andy Wilkinson</name>
    </author>
    <id>tag:spring.io,2015-12-18:2327</id>
    <updated>2015-12-18T19:00:51Z</updated>
    <content type="html">&lt;p&gt;&lt;a href="http://platform.spring.io/platform"&gt;Spring IO Platform&lt;/a&gt; 1.1.5.RELEASE is now available from both &lt;a href="http://repo.spring.io/release"&gt;repo.spring.io&lt;/a&gt; and &lt;a href="http://search.maven.org/#search%7Cga%7C1%7Cg%3Aio.spring.platform"&gt;Maven Central&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;This maintenance release upgrades the versions of a number of the projects in the Platform to pick up their latest maintenance releases:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Batch 3.0.6.RELEASE&lt;/li&gt;
  &lt;li&gt;Spring Boot 1.2.8.RELEASE&lt;/li&gt;
  &lt;li&gt;Spring Framework 4.1.9.RELEASE&lt;/li&gt;
  &lt;li&gt;Spring Integration 4.1.8.RELEASE&lt;/li&gt;
  &lt;li&gt;Spring Security 3.2.9.RELEASE&lt;/li&gt;
  &lt;li&gt;Spring Security OAuth 2.0.8.RELEASE&lt;/li&gt;
  &lt;li&gt;Spring Social 1.1.4.RELEASE&lt;/li&gt;
  &lt;li&gt;Spring Social Facebook 2.0.3.RELEASE&lt;/li&gt;
  &lt;li&gt;Spring Web Services 2.2.3.RELEASE&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The versions of many third-party dependencies have also been updated.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://platform.spring.io/platform"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-io/platform"&gt;GitHub&lt;/a&gt; | &lt;a href="https://github.com/spring-io/platform/issues"&gt;Issues&lt;/a&gt; | &lt;a href="http://docs.spring.io/platform/docs/1.1.5.RELEASE/reference/htmlsingle"&gt;Documentation&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Data release train Gosling SR2 released</title>
    <link rel="alternate" href="https://spring.io/blog/2015/12/18/spring-data-release-train-gosling-sr2-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Oliver Gierke</name>
    </author>
    <id>tag:spring.io,2015-12-18:2326</id>
    <updated>2015-12-18T18:24:00Z</updated>
    <content type="html">&lt;p&gt;On behalf of the Spring Data team I&amp;rsquo;d like to announce the availability of the second service release of the Spring Data Gosling release train. The release ships &lt;a href="https://jira.spring.io/issues/?filter=15342"&gt;45 issues fixed&lt;/a&gt; and contains an important bugfix for an issue in Spring Data JPA&amp;rsquo;s method metadata detection. Thus it&amp;rsquo;s a recommended upgrade for all Gosling users and also users of previous release trains.&lt;/p&gt;
&lt;p&gt;The release is be included in the &lt;a href="https://spring.io/blog/2015/12/18/spring-boot-1-3-1-and-1-2-8-available-now"&gt;just released Spring Boot 1.3.1 release&lt;/a&gt; which should make the upgrade a non-issue. If you&amp;rsquo;re using the BOM, make sure you upgrade to &lt;code&gt;Gosling-SR2A&lt;/code&gt; (note the trailing A). A tiny glitch during the release forced us into that slightly weird version number.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the list of modules involved:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Data Commons 1.11.2 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-commons/1.11.2.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/commons/docs/1.11.2.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/commons/docs/1.11.2.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/commons/docs/1.11.2.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data JPA 1.9.2 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-jpa/1.9.2.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/jpa/docs/1.9.2.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/jpa/docs/1.9.2.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/jpa/docs/1.9.2.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data MongoDB 1.8.2 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-mongodb/1.8.2.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/mongodb/docs/1.8.2.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/mongodb/docs/1.8.2.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/mongodb/docs/1.8.2.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Redis 1.6.2 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-redis/1.6.2.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/redis/docs/1.6.2.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/redis/docs/1.6.2.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/redis/docs/1.6.2.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data REST 2.4.2 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-rest-webmvc/2.4.2.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/rest/docs/2.4.2.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/rest/docs/2.4.2.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/rest/docs/2.4.2.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Solr 1.5.2 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-solr/1.5.2.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/solr/docs/1.5.2.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/solr/docs/1.5.2.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/solr/docs/1.5.2.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data KeyValue 1.0.2 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-keyvalue/1.0.2.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/keyvalue/docs/1.0.2.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/keyvalue/docs/1.0.2.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/keyvalue/docs/1.0.2.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Gemfire 1.7.2 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-gemfire/1.7.2.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/gemfire/docs/1.7.2.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/gemfire/docs/1.7.2.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/gemfire/docs/1.7.2.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Elasticsearch 1.3.2 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-elasticsearch/1.3.2.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/elasticsearch/docs/1.3.2.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/elasticsearch/docs/1.3.2.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/elasticsearch/docs/1.3.2.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Neo4j 3.4.2 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-neo4j/3.4.2.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/neo4j/docs/3.4.2.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/neo4j/docs/3.4.2.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/neo4j/docs/3.4.2.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Cassandra 1.3.2 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-cassandra/1.3.2.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/cassandra/docs/1.3.2.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/cassandra/docs/1.3.2.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/cassandra/docs/1.3.2.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Couchbase 1.4.2 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-couchbase/1.4.2.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/couchbase/docs/1.4.2.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/couchbase/docs/1.4.2.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/couchbase/docs/1.4.2.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>Spring Boot 1.3.1 and 1.2.8 available now</title>
    <link rel="alternate" href="https://spring.io/blog/2015/12/18/spring-boot-1-3-1-and-1-2-8-available-now" />
    <category term="releases" label="Releases" />
    <author>
      <name>Stéphane Nicoll</name>
    </author>
    <id>tag:spring.io,2015-12-18:2328</id>
    <updated>2015-12-18T14:25:20Z</updated>
    <content type="html">&lt;p&gt;Spring Boot 1.2.8 and 1.3.1 have been released and are available now from &lt;a href="http://repo.spring.io/release"&gt;repo.spring.io&lt;/a&gt; and &lt;a href="http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.springframework.boot%22"&gt;Maven Central&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;If you haven&amp;rsquo;t tried Spring Boot 1.3 yet, now may be the time to do so: 1.3.1 is a maintenance release that brings &lt;a href="https://github.com/spring-projects/spring-boot/issues?q=milestone%3A1.3.1+is%3Aclosed"&gt;126 fixes and improvements&lt;/a&gt;, almost half of those being pull requests. Thanks again to our amazing contributors!&lt;/p&gt;
&lt;p&gt;Spring Boot 1.2.8 is a maintenance release with &lt;a href="https://github.com/spring-projects/spring-boot/issues?q=milestone%3A1.2.8+is%3Aclosed"&gt;a selection of fixes and improvements&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As we have fixed a &lt;a href="https://github.com/spring-projects/spring-boot/issues/4763"&gt;security vulnerability&lt;/a&gt;, we highly recommend an immediate upgrade for all Spring Boot users.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://projects.spring.io/spring-boot/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot"&gt;GitHub&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot/issues"&gt;Issues&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle"&gt;Documentation&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Framework 3.2.16 available now</title>
    <link rel="alternate" href="https://spring.io/blog/2015/12/17/spring-framework-3-2-16-available-now" />
    <category term="releases" label="Releases" />
    <author>
      <name>Stéphane Nicoll</name>
    </author>
    <id>tag:spring.io,2015-12-17:2325</id>
    <updated>2015-12-17T14:15:05Z</updated>
    <content type="html">&lt;p&gt;After &lt;a href="https://spring.io/blog/2015/12/17/spring-framework-4-2-4-4-1-9-released"&gt;4.2.4 and 4.1.9 earlier today&lt;/a&gt;, it is my pleasure to announce that Spring Framework &lt;a href="https://jira.spring.io/secure/ReleaseNote.jspa?projectId=10000&amp;version=15402"&gt;3.2.16 is now available&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://projects.spring.io/spring-framework/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-framework"&gt;GitHub&lt;/a&gt; | &lt;a href="https://jira.spring.io/browse/SPR"&gt;Issues&lt;/a&gt; | &lt;a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/htmlsingle/"&gt;Documentation&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Framework 4.2.4 &amp; 4.1.9 released</title>
    <link rel="alternate" href="https://spring.io/blog/2015/12/17/spring-framework-4-2-4-4-1-9-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Juergen Hoeller</name>
    </author>
    <id>tag:spring.io,2015-12-15:2322</id>
    <updated>2015-12-17T10:00:00Z</updated>
    <content type="html">&lt;p&gt;Dear Spring community,&lt;/p&gt;
&lt;p&gt;It is my pleasure to announce that Spring Framework &lt;a href="https://jira.spring.io/jira/secure/ReleaseNote.jspa?projectId=10000&amp;version=15353"&gt;4.2.4&lt;/a&gt; and &lt;a href="https://jira.spring.io/jira/secure/ReleaseNote.jspa?projectId=10000&amp;version=15349"&gt;4.1.9&lt;/a&gt; are available from &lt;a href="https://repo.spring.io/"&gt;repo.spring.io&lt;/a&gt; and &lt;a href="http://search.maven.org/"&gt;Maven Central&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;4.2.4 addresses a few regressions in the 4.2.x line and includes many fixes and enhancements, with no immediate issues remaining. &lt;b&gt;4.2.4 is a recommended upgrade for all 4.x users now.&lt;/b&gt; Please note that the 4.2.x line moves into maintenance mode at this point, with a low-volume &lt;a href="https://jira.spring.io/browse/SPR/fixforversion/15439"&gt;4.2.5 maintenance release&lt;/a&gt; scheduled for mid February.&lt;/p&gt;
&lt;p&gt;4.1.9 is designed as the last release in the 4.1.x line, backporting applicable bug fixes as well as selected recent enhancements from 4.2.3 / 4.2.4. &lt;b&gt;Note that this is the ultimate 4.1.x release: Your next upgrade step beyond 4.1.9 is the above-mentioned 4.2.5 in February, even for compatibility issues and security vulnerabilities.&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;In the meantime, development towards 4.3 has started already, soon to be found in our master branch. We are aiming for a &lt;b&gt;4.3 release candidate in April&lt;/b&gt; and a &lt;b&gt;4.3 GA release in May/June&lt;/b&gt;. So if you happen to be interested in the latest developments there, check out &lt;a href="https://jira.spring.io/browse/SPR/fixforversion/15350"&gt;4.3 RC1 issues&lt;/a&gt; on JIRA and 4.3 build snapshots as they become available&amp;hellip;&lt;/p&gt;
&lt;p&gt;Cheers,&lt;br/&gt;Juergen&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - December 15th, 2015</title>
    <link rel="alternate" href="https://spring.io/blog/2015/12/16/this-week-in-spring-december-15th-2015" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2015-12-16:2324</id>
    <updated>2015-12-16T00:21:08Z</updated>
    <content type="html">&lt;p&gt;Wow! It&amp;rsquo;s December 15th, friends; many of us on this planet will &lt;em&gt;soon&lt;/em&gt; celebrate a new year! Hopefully, you&amp;rsquo;ve done a better job than I have of getting all my new year&amp;rsquo;s resolutions finished in time for 2016! If you haven&amp;rsquo;t, at least catching up on the latest and greatest in the Pivotal community won&amp;rsquo;t be insurmountable! Let&amp;rsquo;s see what&amp;rsquo;s happened this week..&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Greg Turnquist&amp;rsquo;s epic blog series on using &lt;a href="https://spring.io/blog/2015/12/15/check-out-our-new-tutorial-react-js-and-spring-data-rest"&gt;Spring with React.js is now available online as a tutorial&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Batch lead Michael Minella just announced &lt;a href="https://spring.io/blog/2015/12/11/spring-batch-3-0-6-release-is-now-available"&gt;Spring Batch 3.0.6 which contains lots of great contributions and bug fixes from the community&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;the good Dr. David Syer put together a &lt;em&gt;very&lt;/em&gt; &lt;a href="https://spring.io/blog/2015/12/10/spring-boot-memory-performance"&gt;good look at Spring Boot&amp;rsquo;s memory characteristics in various configurations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring RestDocs &lt;a href="https://spring.io/blog/2015/12/10/spring-rest-docs-1-0-1-release"&gt;lead Andy Wilkinson just announced Spring Rest Docs 1.0.1&lt;/a&gt; which is maintenance release that includes a number of changes, including improved support for documenting attributes in XML payloads. An immediate&lt;/li&gt;
  &lt;li&gt;Spring Social lead Craig Walls &lt;a href="https://spring.io/blog/2015/12/09/spring-social-facebook-2-0-3-released"&gt;has been hard at work adapting Spring Social to a recent breaking change&lt;/a&gt; in Facebook&amp;rsquo;s Graph API which prevented connections and sign-in from working with Spring Social Facebook. In addition, the API binding has been adjusted to target Graph API v2.5.&lt;/li&gt;
  &lt;li&gt;Duncan Brown wrote a great look at &lt;a href="https://dzone.com/articles/do-not-publish-migrating-spring-data-neo4j-3x-to-4"&gt;how to migrate Spring Data Neo4J 3.0 projects to the new 4.0 line&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I &lt;em&gt;think&lt;/em&gt; this Chinese-language &lt;a href="http://www.jianshu.com/p/a35b25f4c1ec"&gt;post introduces how to use Spring Boot&lt;/a&gt;, in which case - enjoy!&lt;/li&gt;
  &lt;li&gt;Couchbase&amp;rsquo;s Simon Baslé put together a nice post on using Spring Data Couchbase and the various things it supports, &lt;a href="http://blog.couchbase.com/2015/december/couchbase-spring-cache"&gt;including the &lt;code&gt;Cache&lt;/code&gt; abstraction and Spring Data repositories&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;the &lt;em&gt;AppMite&lt;/em&gt; blog has a neat introduction to standing up &lt;a href="http://appmite.com/spring-with-backbone-marionette-hello-world/"&gt;a simple Spring Boot application to serve as the backend for a Backbone + Marionette-based JavaScript client&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Marko Švaljek has put together a very cool post on handling stream &lt;a href="http://msvaljek.blogspot.com/2015/12/stream-processing-with-spring-kafka_44.html"&gt;processing with Spring Boot, Kafka, and more&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Duy Hai Doan, an Apache Cassandra evangelist at DataStax, put together a very &lt;a href="https://academy.datastax.com/demos/getting-started-killrchat-example-data-model-messaging"&gt;cool post on a sample application, &lt;em&gt;KillrChat&lt;/em&gt;, based on Spring Boot, Cassandra, and more&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Want a &lt;a href="https://www.youtube.com/watch?v=3xrRIesGneg"&gt;quick introduction to using Spring Boot and AOP&lt;/a&gt;?&lt;/li&gt;
  &lt;li&gt;Christoph Strobl&amp;rsquo;s talk from SpringOne2GX 2015, &lt;a href="http://www.infoq.com/presentations/spring-boot-search"&gt;&lt;em&gt;Boot Your Search with Spring&lt;/em&gt;&lt;/a&gt;, is now available online.&lt;/li&gt;
  &lt;li&gt;Learn about &lt;a href="http://toedter.com/2015/12/13/creating-colorful-banners-for-spring-boot-applications/"&gt;Spring Boot 1.3&amp;rsquo;s new support for colored banners&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Recently, a friend of the community, &lt;a href="https://twitter.com/craigburke1"&gt;Craig Burke&lt;/a&gt;, made an &lt;a href="https://github.com/spring-projects/spring-boot/pull/4647"&gt;&lt;em&gt;epic&lt;/em&gt; pull-request&lt;/a&gt; after Spring Boot 1.3 debuted the aforementioned support for color banner ASCII art: a &lt;code&gt;Banner&lt;/code&gt; implementation that &lt;em&gt;also&lt;/em&gt; knows to look for &lt;code&gt;banner.jpg&lt;/code&gt;, not just &lt;code&gt;banner.txt&lt;/code&gt;! Seizing upon this, I created a simple Boot-based CLI and &lt;a href="http://bootiful-banners.cfapps.io/banners"&gt;a Cloud Foundry web service&lt;/a&gt; whose &lt;a href="http://github.com/joshlong/bootiful-banners"&gt;code are available online&lt;/a&gt; - thanks Craig!&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>Check out our new tutorial -&gt; React.js and Spring Data REST</title>
    <link rel="alternate" href="https://spring.io/blog/2015/12/15/check-out-our-new-tutorial-react-js-and-spring-data-rest" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Greg Turnquist</name>
    </author>
    <id>tag:spring.io,2015-12-15:2323</id>
    <updated>2015-12-15T18:07:29Z</updated>
    <content type="html">&lt;p&gt;Greetings Spring Community,&lt;/p&gt;
&lt;p&gt;I hope you enjoyed my blog series on React.js + Spring Data REST. In that series, you got to build up a rich web app with hypermedia controls, conditional operations, messaging, and security. &lt;/p&gt;
&lt;p&gt;To make things even better, that series has been bundled up and converted into a tutorial: &lt;a href="https://spring.io/guides/tutorials/react-and-spring-data-rest/"&gt;https://spring.io/guides/tutorials/react-and-spring-data-rest/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Some key updates made along the way:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;require.js has been replaced with webpack as the JavaScript module builder/loader of choice&lt;/li&gt;
  &lt;li&gt;The code is upgraded to ES6. This means that some of JavaScript&amp;rsquo;s newest features like classes, arrow functions, and more are being used.&lt;/li&gt;
  &lt;li&gt;bower has been replaced by npm as the package manager of choice&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hopefully, this tutorial will give you new ideas about building frontend/backend apps in the future based on the Spring portfolio.&lt;/p&gt;</content>
  </entry>
</feed>
