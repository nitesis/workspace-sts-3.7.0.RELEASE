<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Spring</title>
  <link rel="alternate" href="https://spring.io/blog" />
  <link rel="self" href="https://spring.io/blog.atom" />
  <id>http://spring.io/blog.atom</id>
  <icon>https://spring.io/favicon.ico</icon>
  <updated>2015-12-01T12:52:39Z</updated>
  <entry>
    <title>This Week in Spring - December 1, 2015</title>
    <link rel="alternate" href="https://spring.io/blog/2015/12/01/this-week-in-spring-december-1-2015" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2015-12-01:2313</id>
    <updated>2015-12-01T12:52:39Z</updated>
    <content type="html">&lt;p&gt;Wow! Can you believe we&amp;rsquo;re already staring down 2016? Time sure flies! Remember, &lt;em&gt;This Week in Spring&lt;/em&gt; was &lt;em&gt;started&lt;/em&gt; the first week of 2011, so we&amp;rsquo;ll soon mark the fifth anniversairry of TWiS!&lt;/p&gt;
&lt;p&gt;This week I&amp;rsquo;m in Shanghai, China, for &lt;em&gt;the Cloud Foundry Summit Asia&lt;/em&gt; and then off to Ft. Lauderdale, Florida, USA, for the &lt;em&gt;Rich Web Experience&lt;/em&gt;! If you&amp;rsquo;re in either place, &lt;a href="mailto:josh@joshlong.com"&gt;don&amp;rsquo;t hesitate to reach me&lt;/a&gt;! &lt;/p&gt;
&lt;p&gt;As usual, we&amp;rsquo;ve got a lot to cover so let&amp;rsquo;s get to it!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Boot co-founder and Spring framework contributor Phil Webb put up a really thoughtful post helping people looking at Spring (which has been around for 10+ years) to &lt;a href="http://spring.io/blog/2015/11/29/how-not-to-hate-spring-in-2016"&gt;avoid some of the common pitfalls facing new developers in 2016&lt;/a&gt;. A &lt;em&gt;very&lt;/em&gt; recommended read!&lt;/li&gt;
  &lt;li&gt;Florian Benz did a great job discussing the motivations and use of comprehensive REST &lt;a href="https://medium.com/@flbenz/beautiful-api-documentation-with-negligible-overhead-2ba523205f61#.fo0hrc2lv"&gt;documentation as generated with Spring Rest Docs&lt;/a&gt;. This is a really cool, &lt;em&gt;quick&lt;/em&gt; read!&lt;/li&gt;
  &lt;li&gt;Speaking of Spring Rest Docs, there&amp;rsquo;s a great interview with the project lead, the amazing Andy Wilkinson who - in his ample free time - also manages the Spring IO Platform as well as contributes to Spring Boot. &lt;a href="https://dzone.com/articles/a-qa-with-andy-wilkinson-on-spring-rest-docs"&gt;Read on to learn more about one of my heroes&lt;/a&gt;!&lt;/li&gt;
  &lt;li&gt;Spring Boot and Spring Cloud co-founder Dr. Dave Syer has put [up a nice post on &lt;a href="http://spring.io/blog/2015/11/25/migrating-spring-cloud-apps-from-spring-boot-1-2-to-1-3"&gt;migrating Spring Cloud applications from Spring Boot 1.2 to the just released 1.3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Social lead Craig Walls just &lt;a href="http://spring.io/blog/2015/11/25/spring-social-1-1-4-released"&gt;announced Spring Social 1.1.4 which includes a few recommended bugfixes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data ninja Thomas Risberg &lt;a href="http://spring.io/blog/2015/11/25/news-for-spring-data-jdbc-extensions-project"&gt;just announced Spring Data JDBC Extensions 1.2 and a slew of other great updates&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Tool Suite lead Martin Lippert &lt;a href="http://spring.io/blog/2015/11/27/spring-tool-suite-3-7-2-released"&gt;just announced the STS 3.7.2 release of STS&lt;/a&gt; which includes an updated Spring Boot Dashboard, Spring Boot 1.3.0 compatibility, quick text search and more.&lt;/li&gt;
  &lt;li&gt;Spring Boot, Spring Cloud and Spring Security OAuth contributor, co-founder and ninja Dr. Dave Syer&amp;rsquo;s &lt;a href="http://spring.io/blog/2015/11/30/migrating-oauth2-apps-from-spring-boot-1-2-to-1-3"&gt;post on migrating OAuth-based code from Spring Cloud Angel to Brixton&lt;/a&gt;, given the introduction of some of those features in Spring Boot 1.3, is a very cool read!&lt;/li&gt;
  &lt;li&gt;Speaking of Spring Cloud Security, check &lt;a href="https://dzone.com/articles/securing-microservices-with-spring-cloud-security"&gt;out my pal Will Tran&amp;rsquo;s epic talk from SpringOne2GX 2015&lt;/a&gt;!&lt;/li&gt;
  &lt;li&gt;Check out Spring Cloud co-founder Spencer Gibb&amp;rsquo;s epic talk from &lt;a href="http://www.infoq.com/presentations/spring-cloud-alternatives?utm_source=infoq&amp;utm_medium=videos_homepage&amp;utm_campaign=videos_row2"&gt;SpringOne2GX on alternative implementations of common extension hooks for Spring Cloud&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>Migrating OAuth2 Apps from Spring Boot 1.2 to 1.3</title>
    <link rel="alternate" href="https://spring.io/blog/2015/11/30/migrating-oauth2-apps-from-spring-boot-1-2-to-1-3" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Dave Syer</name>
    </author>
    <id>tag:spring.io,2015-11-24:2306</id>
    <updated>2015-11-30T15:29:29Z</updated>
    <content type="html">&lt;p&gt;There are some new features in &lt;a href="http://projects.spring.io/spring-boot/"&gt;Spring Boot&lt;/a&gt; 1.3 to do with &lt;a href="https://tools.ietf.org/html/rfc6749"&gt;OAuth2&lt;/a&gt; clients and servers and &lt;a href="http://projects.spring.io/spring-security-oauth/"&gt;Spring Security OAuth2&lt;/a&gt;. Some of those features were ported from &lt;a href="http://cloud.spring.io/spring-cloud-Security/,"&gt;Spring Cloud Security&lt;/a&gt; and hence were in the Angel release train of &lt;a href="http://projects.spring.io/spring-cloud/"&gt;Spring Cloud&lt;/a&gt;, but are not in the Brixton release train. This article helps you navigate the changes and update any existing apps to use the new features.&lt;/p&gt;&lt;h2&gt;&lt;a href="#dependency-management" class="anchor" name="dependency-management"&gt;&lt;/a&gt;Dependency Management&lt;/h2&gt;
&lt;p&gt;If you are not using Spring Cloud you should be able to just change the version number of your Spring Boot dependency. Since some of the OAuth2 features migrated from Spring Cloud Security to Spring Boot in 1.3, it is likely that things are slightly more complicated than that. A &lt;a href="https://spring.io/blog/2015/11/25/migrating-spring-cloud-apps-from-spring-boot-1-2-to-1-3"&gt;separate article&lt;/a&gt; deals with upgrading Spring Cloud apps from Spring Boot 1.2 to 1.3. If you are using the Spring Cloud Angel release train then you should consult that article for details of how to manage the dependencies (independent of any specific features).&lt;/p&gt;&lt;h2&gt;&lt;a href="#authorization-server" class="anchor" name="authorization-server"&gt;&lt;/a&gt;Authorization Server&lt;/h2&gt;
&lt;p&gt;An OAuth2 Authorization Server is responsible first and foremost for issuing access tokens. To do this it must be able to authenticate client apps and (optionally) users.&lt;/p&gt;
&lt;p&gt;A very simple OAuth2 Authorization Server with a single client can be implemented by convention and some configuration properties in Spring Boot 1.3. So a really basic example like the vanilla auth server from the &lt;a href="https://spring.io/guides/tutorials/spring-security-and-angular-js/#_sso_with_oauth2_angular_js_and_spring_security_part_v"&gt;Angular JS Spring Securrity Tutorial&lt;/a&gt; from spring.io can be simplified quite a bit. In Spring Boot 1.2 we have:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@SpringBootApplication&#xD;
@RestController&#xD;
@EnableResourceServer&#xD;
public class AuthserverApplication {&#xD;
       &#xD;
  @Configuration&#xD;
  @EnableAuthorizationServer&#xD;
  protected static class OAuth2Config extends AuthorizationServerConfigurerAdapter {&#xD;
&#xD;
    @Autowired&#xD;
    private AuthenticationManager authenticationManager;&#xD;
         &#xD;
    @Override&#xD;
    public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Excep&#xD;
      endpoints.authenticationManager(authenticationManager);&#xD;
    }&#xD;
&#xD;
    @Override&#xD;
    public void configure(ClientDetailsServiceConfigurer clients) throws Exception {&#xD;
      clients.inMemory()&#xD;
        .withClient(&amp;quot;acme&amp;quot;)&#xD;
          .secret(&amp;quot;acmesecret&amp;quot;)&#xD;
          .authorizedGrantTypes(&amp;quot;authorization_code&amp;quot;, &amp;quot;refresh_token&amp;quot;,&#xD;
              &amp;quot;password&amp;quot;)&#xD;
          .scopes(&amp;quot;openid&amp;quot;).autoApprove(true);&#xD;
    }&#xD;
&#xD;
  }&#xD;
&#xD;
  ...&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In Spring Boot 1.3 we have just:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@SpringBootApplication&#xD;
@RestController&#xD;
@EnableResourceServer&#xD;
@EnableAuthorizationServer&#xD;
public class AuthserverApplication {&#xD;
  ...&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and in &lt;code&gt;application.properties&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;security.oauth2.client.clientId: acme&#xD;
security.oauth2.client.clientSecret: acmesecret&#xD;
security.oauth2.client.authorized-grant-types: authorization_code,refresh_token,password&#xD;
security.oauth2.client.scope: openid
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a general purpose Authorization Server, great for demos, but not very realistic in practice because it only has one client (&amp;ldquo;acme&amp;rdquo;). Nevertheless, as a way to get started quickly with OAuth2 it&amp;rsquo;s nice to be able to do so much with so little.&lt;/p&gt;
&lt;p&gt;To extend the basic sample and take control of the Authorization Server features you only have to go back to the old Spring Boot 1.2 version (any app with its own &lt;code&gt;AuthorizationServerConfigurer&lt;/code&gt; switches off the autoconfigured features).&lt;/p&gt;&lt;h2&gt;&lt;a href="#resource-server" class="anchor" name="resource-server"&gt;&lt;/a&gt;Resource Server&lt;/h2&gt;
&lt;p&gt;A Resource Server protects its endpoints by requiring a valid access token (as created by the Authorization Server).&lt;/p&gt;
&lt;p&gt;Similarly to the Authorization Server, a Resource Server can be implemented by convention and some configuration properties in Spring Boot 1.3, and also with Spring Boot 1.2 in conjunction with Spring Cloud Security. As an example consider the vanilla resource server &lt;a href="https://spring.io/guides/tutorials/spring-security-and-angular-js/#_sso_with_oauth2_angular_js_and_spring_security_part_v"&gt;Angular JS Spring Security Tutorial&lt;/a&gt; from spring.io.&lt;/p&gt;
&lt;p&gt;With Spring Boot 1.2 we had to use Spring Cloud Security for the &lt;code&gt;@EnableOAuth2Resource&lt;/code&gt; annotation:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint groovy"&gt;@SpringBootApplication&#xD;
@RestController&#xD;
@EnableOAuth2Resource&#xD;
class ResourceApplication {&#xD;
  ...&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and some configuration to help decode the access tokens in &lt;code&gt;application.properties&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;spring.oauth2.resource.userInfoUri: http://localhost:9999/uaa/user
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With Spring Boot 1.3 the Spring Cloud dependency can be removed and the annotation replaced with a vanilla &lt;code&gt;@EnableResourceServer&lt;/code&gt; annotation from Spring Security OAuth2:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint groovy"&gt;@SpringBootApplication&#xD;
@RestController&#xD;
@EnableResourceServer&#xD;
class ResourceApplication {&#xD;
  ...&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To finish the app there is a slightly different configuration (note the key prefix change from &lt;code&gt;spring.oauth2&lt;/code&gt; to &lt;code&gt;security.oauth2&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;security.oauth2.resource.userInfoUri: http://localhost:9999/uaa/user
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a href="#client-application" class="anchor" name="client-application"&gt;&lt;/a&gt;Client Application&lt;/h2&gt;
&lt;p&gt;In OAuth2 a client is an agent (usually an application) that acquires a token, often on behalf of a user. Single Sign On can be implemented by having a single Authorization Server and dependent authenticating apps that are OAuth2 clients.&lt;/p&gt;&lt;h3&gt;&lt;a href="#vanilla-single-sign-on" class="anchor" name="vanilla-single-sign-on"&gt;&lt;/a&gt;Vanilla Single Sign On&lt;/h3&gt;
&lt;p&gt;On the client side in Spring Boot 1.3 you can implement the Single Sign On pattern with an annotation and some configuration properties. You can do the same with Spring Boot 1.2 is you use Spring Cloud Security as well.&lt;/p&gt;
&lt;p&gt;A really generic example with Spring Boot 1.2 and Spring Cloud Angel would use a single &lt;code&gt;@EnableOAuth2Sso&lt;/code&gt; annotation:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@SpringBootApplication&#xD;
@EnableOAuth2Sso&#xD;
public class SsoApplication {&#xD;
  ...&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and some configuration for the client in &lt;code&gt;application.yml&lt;/code&gt; (or equivalently &lt;code&gt;application.properties&lt;/code&gt;). Here&amp;rsquo;s an example for authentication with Facebook for an app running on localhost:8080:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint yaml"&gt;spring:&#xD;
  oauth2:&#xD;
    client:&#xD;
      clientId: 233668646673605&#xD;
      clientSecret: 33b17e044ee6a4fa383f46ec6e28ea1d&#xD;
      accessTokenUri: https://graph.facebook.com/oauth/access_token&#xD;
      userAuthorizationUri: https://www.facebook.com/dialog/oauth&#xD;
      tokenName: oauth_token&#xD;
      authenticationScheme: query&#xD;
      clientAuthenticationScheme: form&#xD;
    resource:&#xD;
      userInfoUri: https://graph.facebook.com/me
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The same app looks almost identical in Spring Boot 1.3 but there is no need for Spring Cloud Security. Also the annotation moved to a different package, and the configuration prefix changed. So removing the Cloud dependency, changing the import for the annotation and switching the prefix in &lt;code&gt;application.yml&lt;/code&gt; from &lt;code&gt;spring&lt;/code&gt; to &lt;code&gt;security&lt;/code&gt; is all that is needed to migrate this app.&lt;/p&gt;&lt;h3&gt;&lt;a href="#single-sign-on-and-custom-access-rules" class="anchor" name="single-sign-on-and-custom-access-rules"&gt;&lt;/a&gt;Single Sign On and Custom Access Rules&lt;/h3&gt;
&lt;p&gt;In Spring Cloud Security 1.0 (from the Angel release train) users can customize the request matching and access rules using a combination of a special callback &lt;code&gt;OAuth2ClientConfigurer&lt;/code&gt; and some configuration properties in &lt;code&gt;spring.oauth2.sso.*&lt;/code&gt;. So for example, the vanilla client app in the &lt;a href="https://spring.io/guides/tutorials/spring-security-and-angular-js/#_sso_with_oauth2_angular_js_and_spring_security_part_v"&gt;Angular JS Spring Security Tutorial&lt;/a&gt; from spring.io has this general pattern of implementation in Spring Boot 1.2:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@SpringBootApplication&#xD;
@EnableOAuth2Sso&#xD;
public class UiApplication {&#xD;
&#xD;
  @Configuration&#xD;
  protected static class SecurityConfiguration extends OAuth2SsoConfigurerAdapter {&#xD;
&#xD;
    @Override&#xD;
    public void match(RequestMatchers matchers) {&#xD;
      matchers.anyRequest();&#xD;
    }&#xD;
&#xD;
    @Override&#xD;
    public void configure(HttpSecurity http) throws Exception {&#xD;
      http&#xD;
        .authorizeRequests()&#xD;
          .antMatchers(&amp;quot;/index.html&amp;quot;, &amp;quot;/home.html&amp;quot;, &amp;quot;/&amp;quot;).permitAll()&#xD;
          .anyRequest().authenticated()&#xD;
        .and().csrf()&#xD;
          .csrfTokenRepository(csrfTokenRepository())&#xD;
        .and()&#xD;
          .addFilterAfter(csrfHeaderFilter(), CsrfFilter.class);&#xD;
    }&#xD;
&#xD;
  }&#xD;
&#xD;
  ...&#xD;
  &#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and a similar &lt;code&gt;application.yml&lt;/code&gt; to the vanilla sample:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint yaml"&gt;spring:&#xD;
   oauth2:&#xD;
    sso:&#xD;
      home:&#xD;
        secure: false&#xD;
        path: /,/**/*.html&#xD;
     client:&#xD;
       accessTokenUri: http://localhost:9999/uaa/oauth/token&#xD;
       userAuthorizationUri: http://localhost:9999/uaa/oauth/authorize&#xD;
     resource:&#xD;
       userInfoUri: http://localhost:9999/uaa/user
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With Spring Boot 1.3 there is no need for Spring Cloud Security, and the customizations don&amp;rsquo;t need the obsolete &lt;code&gt;OAuth2SsoConfigurerAdapter&lt;/code&gt;. Instead they just need all of the same code, plus a request matcher, in a regular &lt;code&gt;WebSecurityConfigurerAdapter&lt;/code&gt; carrying the &lt;code&gt;@EnableOAuth2Sso&lt;/code&gt; annotation:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@SpringBootApplication&#xD;
@EnableZuulProxy&#xD;
@EnableOAuth2Sso&#xD;
public class UiApplication extends WebSecurityConfigurerAdapter {&#xD;
&#xD;
  @Override&#xD;
  public void configure(HttpSecurity http) throws Exception {&#xD;
    http.antMatcher(&amp;quot;/**&amp;quot;)&#xD;
      .authorizeRequests()&#xD;
        .antMatchers(&amp;quot;/index.html&amp;quot;, &amp;quot;/home.html&amp;quot;, &amp;quot;/&amp;quot;).permitAll()&#xD;
        .anyRequest().authenticated()&#xD;
      .and().csrf()&#xD;
        .csrfTokenRepository(csrfTokenRepository())&#xD;
      .and()&#xD;
        .addFilterAfter(csrfHeaderFilter(), CsrfFilter.class);&#xD;
  }&#xD;
  &#xD;
  ...&#xD;
&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The configuration properties in the updated version are mostly the same: there is a prefix change from &lt;code&gt;spring.oauth2&lt;/code&gt; to &lt;code&gt;security.oauth2&lt;/code&gt; and there is no need for the &lt;code&gt;*.oauth2.sso.*&lt;/code&gt; properties because they are explicitly configured by the user in the &lt;code&gt;WebSecurityConfigurerAdapter&lt;/code&gt;.&lt;/p&gt;&lt;h3&gt;&lt;a href="#single-sign-on-and-zuul-proxy" class="anchor" name="single-sign-on-and-zuul-proxy"&gt;&lt;/a&gt;Single Sign On and Zuul Proxy&lt;/h3&gt;
&lt;p&gt;The actual client app in the &lt;a href="https://spring.io/guides/tutorials/spring-security-and-angular-js/#_sso_with_oauth2_angular_js_and_spring_security_part_v"&gt;Angular JS Spring Security Tutorial&lt;/a&gt; from spring.io is similar to the customized one above, but it is also a Zuul proxy, responsible for forwarding requests from the browser client to back-end services. In Spring Boot 1.3, this app still needs Spring Cloud Security for the token relay (it wants to send the access tokens used for authentication to the back end resources), but it doesn&amp;rsquo;t need it for the basic SSO features, so the implementation is identical to the previous sample with the addition of an &lt;code&gt;@EnableZuulProxy&lt;/code&gt; annotation.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;NOTE: a bug in Spring Boot 1.3.0 leads to a workaround in the current implementation (at time of writing) of the client app in the &lt;a href="https://spring.io/guides/tutorials/spring-security-and-angular-js/#_sso_with_oauth2_angular_js_and_spring_security_part_v"&gt;Angular JS Spring Security Tutorial&lt;/a&gt;. The workaround is only needed because it is using Spring Cloud Security, and will also be redundant in Spring Boot 1.3.1:&lt;/p&gt;
  &lt;pre&gt;&lt;code class="prettyprint"&gt;@Component
@Order(Ordered.HIGHEST_PRECEDENCE)
class WorkaroundRestTemplateCustomizer implements UserInfoRestTemplateCustomizer {

  public void customize(OAuth2RestTemplate template) {
    template.setInterceptors(new ArrayList&amp;lt;&amp;gt;(template.getInterceptors()));
  }

}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;&lt;h2&gt;&lt;a href="#single-sign-one-in-cloud-foundry" class="anchor" name="single-sign-one-in-cloud-foundry"&gt;&lt;/a&gt;Single Sign One in Cloud Foundry&lt;/h2&gt;
&lt;p&gt;With Spring Boot 1.2 and Spring Cloud Security in the Angel release train, an app is able to configire itself for OAuth2 SSO if you bind to a service with the right credentials. E.g. you can create a User Provided Service like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;cf create-user-provided-service sso -p &amp;#39;{&amp;quot;userInfoUri&amp;quot;:&amp;quot;https://uaa.run.pivotal.io/userinfo&amp;quot;, &amp;quot;tokenUri&amp;quot;:&amp;quot;login.run.pivotal.io/oauth/token&amp;quot;, &amp;quot;authorizationUri&amp;quot;:&amp;quot;login.run.pivotal.io/oauth/authorize&amp;quot;, &amp;quot;clientId&amp;quot;:&amp;quot;[client]&amp;quot;, &amp;quot;clientSecret&amp;quot;:&amp;quot;[secret]&amp;quot;}&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then an app with &lt;code&gt;@EnableOAuth2Sso&lt;/code&gt; which is bound to the service will bind the configuration needed for the SSO without the user having to change any configuration.&lt;/p&gt;
&lt;p&gt;The same feature is available in Spring Boot 1.3 and Spring Cloud Brixton, but instead of Spring Cloud Security you need to use the new &lt;code&gt;spring-cloud-cloudfoundry-web&lt;/code&gt; library to get the SSO configuration binding behaviour. You can also use the built-in SSO service in Cloud Foundry instead of a User Provided Service (available in Pivotal Web Services for selected accounts or in Pivotal Cloud Foundry).&lt;/p&gt;&lt;h2&gt;&lt;a href="#conclusion" class="anchor" name="conclusion"&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;If you are using Spring Boot and maybe Spring Cloud with OAuth2, hopefully you will now be able to upgrade smoothly from Spring Boot 1.2 to 1.3, or at worst you will have some tools to help you think about what is going on when you hit the bumps. Spring Boot 1.3 has nearly all the features of Spring Cloud Security 1.0, so the main thing you need to think about is the dependencies. In addition there are a few new features in Spring Boot, like autoconfiguration of an Authorization Server, for instance. As usual with Spring Boot, you can (and should) take the default bevaviour until you need to change it, at which point there should be no barriers to doing so.&lt;/p&gt;
&lt;p&gt;The sample apps in the Spring Guides have all been updated to Spring Boot 1.3 now, even if that means they depend on a milestone of Spring Cloud (this only applies to the Zuul proxy sample). Many do not need Spring Cloud any more. If you need a GA version of Spring Cloud you need to stay with Spring Boot 1.2 right now. The samples for that combination can be lifted from git history.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>How not to hate Spring in 2016</title>
    <link rel="alternate" href="https://spring.io/blog/2015/11/29/how-not-to-hate-spring-in-2016" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Phil Webb</name>
    </author>
    <id>tag:spring.io,2015-11-29:2311</id>
    <updated>2015-11-29T17:31:00Z</updated>
    <content type="html">&lt;p&gt;Over the Thanksgiving weekend a 2014 article called &lt;a href="http://samatkinson.com/why-i-hate-spring/"&gt;&amp;ldquo;Why I hate Spring&amp;rdquo; by Sam Atkinson&lt;/a&gt; started doing the rounds on Twitter. It&amp;rsquo;s always interesting to listen to criticisms to see what we can do to improve Spring, much of &lt;a href="https://spring.io/projects/spring-boot"&gt;Spring Boot&lt;/a&gt; was born out of listening to &lt;a href="https://jira.spring.io/browse/SPR-9888"&gt;people talk about the problems&lt;/a&gt; that they faced with the framework. &lt;/p&gt;
&lt;p&gt;In this blog post, I&amp;rsquo;ll try to address some of the concerns discussed in Sam&amp;rsquo;s article, and describe my personal Spring &amp;ldquo;best practices&amp;rdquo;. Before we get too much into the details though, it&amp;rsquo;s worth considering why less than optimal ways of doing things still exist in the framework.&lt;/p&gt;&lt;h2&gt;&lt;a href="#the-curse-of-backwards-compatibility" class="anchor" name="the-curse-of-backwards-compatibility"&gt;&lt;/a&gt;The curse of backwards-compatibility&lt;/h2&gt;
&lt;p&gt;One of the more stressful aspects of working on Spring, other than people writing about how much they hate it, is that features tend to have a very long tail. Spring has a strong commitment to back-compatibility, which means once a feature gets added, it&amp;rsquo;s quite hard to fundamentally change it. Developing a framework presents unique challenges that application developers don&amp;rsquo;t generally have. Agile techniques such as YAGNI &lt;em&gt;(You ain&amp;rsquo;t gonna need it)&lt;/em&gt; and, refactor aggressively are much harder to apply. We have SMNI &lt;em&gt;(Someone might need it)&lt;/em&gt; and, refactor cautiously. Features that made sense before lambdas, generics and even annotations existed in Java are still supported. It&amp;rsquo;s easy to argue that XML isn&amp;rsquo;t such a good way to wire up beans these days, but it&amp;rsquo;s much harder to argue that it should be removed altogether. I personally value the fact that I can easily upgrade older Spring applications and gradually migrate to newer techniques.&lt;/p&gt;
&lt;p&gt;Remember as well that, just like commercial software, open source has limited resource and pressures of time. Sometimes we just make mistakes as developers and end up needing to live with them for a while.&lt;/p&gt;&lt;h2&gt;&lt;a href="#too-big-too-fail" class="anchor" name="too-big-too-fail"&gt;&lt;/a&gt;Too Big, Too Fail?&lt;/h2&gt;
&lt;p&gt;At its heart, Spring is an integration framework. It provides a consistent programming model over lots of different technologies. It&amp;rsquo;s fair to say that Spring can be on the large side, but it&amp;rsquo;s simply not possible to provide integration with lots of technologies without&amp;hellip; integrating with lots of technologies. Although it can seem overwhelming, once you understand the core concepts, it&amp;rsquo;s pretty easy to pick only the parts of the Spring that you need. The &lt;a href="https://spring.io/guides"&gt;guides on spring.io&lt;/a&gt; can be useful starting point if you have some specific goal that you need to achieve. The &lt;a href="http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#using-boot-starter-poms"&gt;list of Spring Boot starters&lt;/a&gt; or using &lt;a href="http://start.spring.io"&gt;start.spring.io&lt;/a&gt; can also be a good way of limiting Spring to a specific area.&lt;/p&gt;&lt;h2&gt;&lt;a href="#dependencies" class="anchor" name="dependencies"&gt;&lt;/a&gt;Dependencies&lt;/h2&gt;
&lt;p&gt;A typical Spring-based application will have dependencies on any number of third-party libraries. Historically, it&amp;rsquo;s been hard to know exactly which versions of various libraries will work well together. If you&amp;rsquo;re starting a new project today, I highly recommend using &lt;a href="http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#using-boot-dependency-management"&gt;Spring Boot&amp;rsquo;s parent POM&lt;/a&gt; or the &lt;a href="https://spring.io/platform"&gt;Spring Platform&lt;/a&gt;. Both provide a curated set of dependencies that are known to work well together.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ve even developed a &lt;a href="https://github.com/spring-gradle-plugins/dependency-management-plugin"&gt;Gradle plugin that allows you to use the managed dependencies&lt;/a&gt; section of POM when you don&amp;rsquo;t have the benefit of Maven&amp;rsquo;s parent dependency feature.&lt;/p&gt;
&lt;p&gt;If you can&amp;rsquo;t use managed dependencies for some reason, you can still refer to the Spring Boot documentation for a &lt;a href="http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#appendix-dependency-versions"&gt;list of compatible versions&lt;/a&gt; that are known to play well together.&lt;/p&gt;&lt;h2&gt;&lt;a href="#injection" class="anchor" name="injection"&gt;&lt;/a&gt;Injection&lt;/h2&gt;
&lt;p&gt;Always use &lt;a href="http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/htmlsingle/#beans-constructor-injection"&gt;constructor based dependency injection&lt;/a&gt; in your beans. Always use &lt;a href="http://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/util/Assert.html"&gt;assertions&lt;/a&gt; for mandatory dependencies. For more background on why field based injection is evil, you can read &lt;a href="http://olivergierke.de/2013/11/why-field-injection-is-evil/"&gt;this article by Oliver Gierke&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As always there is one exception to the rule, it&amp;rsquo;s fine to use field based injection in tests when you&amp;rsquo;re &lt;a href="http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/htmlsingle/#integration-testing"&gt;using the &lt;code&gt;SpringJUnit4ClassRunner&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;&lt;a href="#leaky-spring" class="anchor" name="leaky-spring"&gt;&lt;/a&gt;Leaky Spring&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ve seen a few people argue that application code should &lt;em&gt;never&lt;/em&gt; have any dependencies on frameworks. I.e. an &lt;code&gt;org.springframework&lt;/code&gt; import anywhere (other than configuration code) is bad. Whilst you can absolutely can do this (there is wide support for standard annotations such as &lt;code&gt;@Inject&lt;/code&gt;), I tend not to be so prescriptive. I prefer to apply the 80/20 rule here. I think it&amp;rsquo;s fine to have dependencies on framework classes and annotations, but I don&amp;rsquo;t want to rewrite more than 20% of the class if I were to move off Spring.&lt;/p&gt;
&lt;p&gt;What I do want is application code that is easy to test. It should be possible for me to manually create an instance of my business service and test it without needing a full &lt;code&gt;ApplicationContext&lt;/code&gt;.&lt;/p&gt;&lt;h2&gt;&lt;a href="#configuration" class="anchor" name="configuration"&gt;&lt;/a&gt;Configuration&lt;/h2&gt;
&lt;p&gt;I personally like to keep my Spring configuration fairly light. I like to use component-scanning to find application beans and I like to keep my &lt;code&gt;@Configuration&lt;/code&gt; for framework specific configuration that deviates from Spring Boot&amp;rsquo;s default auto-configuration. I don&amp;rsquo;t tend to use XML-configuration at all these days.&lt;/p&gt;
&lt;p&gt;Some people argue that it&amp;rsquo;s better to have explicit configuration for all defined beans but in practice I tend to find this a hindrance. Applications that follow this approach tend to have a single &lt;code&gt;@Configuration&lt;/code&gt; class that ends up knowing about everything in the system, and contains a whole bunch of small &lt;code&gt;@Bean&lt;/code&gt; methods. I also find the self-documentation nature of annotations really useful. I can easily search for &lt;code&gt;@Service&lt;/code&gt; and find all my service beans.&lt;/p&gt;
&lt;p&gt;Sam&amp;rsquo;s article states &lt;em&gt;&amp;ldquo;&amp;hellip;annotations are still magic. Until you run your app you’ve no idea if it’s wired up correctly&amp;rdquo;&lt;/em&gt; but I don&amp;rsquo;t really see how this is much different to having a class that &lt;a href="https://sites.google.com/site/unclebobconsultingllc/blogs-by-robert-martin/dependency-injection-inversion"&gt;manually wires everything up&lt;/a&gt;. You still need to run the entire app at some point to be sure that it works.&lt;/p&gt;&lt;h2&gt;&lt;a href="#layering" class="anchor" name="layering"&gt;&lt;/a&gt;Layering&lt;/h2&gt;
&lt;p&gt;Any system of significant size needs to think about architectural layers. Almost all my Spring applications end up with a &amp;ldquo;domain&amp;rdquo; layer at the bottom and a &amp;ldquo;web&amp;rdquo; layer at the top. I find it best to enforce strict separation between layers and keep dependencies in a single direction. It&amp;rsquo;s pretty easy to annotate domain service exceptions with &lt;code&gt;@ResponseStatus&lt;/code&gt; but I&amp;rsquo;ve rarely found this to be a good idea in practice. Likewise, it&amp;rsquo;s easy to throw some Jackson annotations on an &lt;code&gt;@Entity&lt;/code&gt; so that it can be marshalled as JSON but this often causes problems in the long run.&lt;/p&gt;
&lt;p&gt;I recommend tools such as &lt;a href="https://structure101.com/"&gt;Structure 101&lt;/a&gt; and &lt;a href="http://www.sonarqube.org/"&gt;SonarQube&lt;/a&gt; which can check your code for package tangles and design problems.&lt;/p&gt;&lt;h2&gt;&lt;a href="#spring-mvc" class="anchor" name="spring-mvc"&gt;&lt;/a&gt;Spring MVC&lt;/h2&gt;
&lt;p&gt;I generally find it best to keep business logic outside of Spring MVC &lt;code&gt;@Controller&lt;/code&gt; beans. I like to think of Spring MVC as a little adapter layer. It&amp;rsquo;s responsible for taking HTTP input, validating it, passing it to a service then returning a response. I&amp;rsquo;ll often add mediator &lt;code&gt;@Service&lt;/code&gt; beans at the web layer to take care coordinating calls to business services. This generally makes it much easier to test things, especially when using the &lt;a href="http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/htmlsingle/#spring-mvc-test-framework"&gt;MVC Test framework&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;&lt;a href="#logging" class="anchor" name="logging"&gt;&lt;/a&gt;Logging&lt;/h2&gt;
&lt;p&gt;Logging in Java really shouldn&amp;rsquo;t be as difficult as it is. There are so many logging libraries to choose from, and so many different combinations that it&amp;rsquo;s easy to get bogged down. Luckily, for a typical Spring Boot application you don&amp;rsquo;t really need to worry too much. My advice is always:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use &lt;a href="http://www.slf4j.org/"&gt;SLF4J&lt;/a&gt; in your code to log things.&lt;/li&gt;
  &lt;li&gt;Stick with Spring Boot&amp;rsquo;s default choice of &lt;a href="http://logback.qos.ch/"&gt;logback&lt;/a&gt; if possible.&lt;/li&gt;
  &lt;li&gt;Log to the console only and use a tool such as &lt;a href="http://www.splunk.com"&gt;Splunk&lt;/a&gt; to capture and store.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;&lt;a href="#testing" class="anchor" name="testing"&gt;&lt;/a&gt;Testing&lt;/h2&gt;
&lt;p&gt;The golden rule for unit testing in Spring is keep Spring out of your unit testing! It should be possible to unit test the majority of your beans without needing to spin up an application context. There&amp;rsquo;s a lot of debate in the testing world about mocks, but I generally find judicious use of &lt;a href="http://mockito.org/"&gt;Mockito&lt;/a&gt; (I like &lt;a href="http://mockito.github.io/mockito/docs/current/org/mockito/BDDMockito.html"&gt;BDD Mockito&lt;/a&gt;) pretty helpful.&lt;/p&gt;
&lt;p&gt;You will often need to involve Spring when it comes to integration testing. I tend to find my integration tests often configure a &amp;ldquo;layer&amp;rdquo; of the application. For example, domain tests might startup Hibernate + Spring Data + In-memory Database. For Spring MVC tests, I tend to leave the database alone and inject mock services. The layered architecture discussed above really starts to pay dividends here since it&amp;rsquo;s easy to mock or stub the things that your &amp;ldquo;web layer&amp;rdquo; needs.&lt;/p&gt;&lt;h2&gt;&lt;a href="#startup-times" class="anchor" name="startup-times"&gt;&lt;/a&gt;Startup times&lt;/h2&gt;
&lt;p&gt;A typical Spring Boot REST application starts in about 2.5 seconds and things get slower once you start to throw technologies such as Hibernate in the mix. Spring is designed to &amp;ldquo;fail fast &amp;amp; fail early&amp;rdquo; and unfortunately that does have an impact on startup time. On the plus side, once an application has started, it&amp;rsquo;s likely that it&amp;rsquo;s in a functioning state.&lt;/p&gt;
&lt;p&gt;If you do have issues with slow startup, consider looking at &lt;a href="https://spring.io/blog/2015/06/17/devtools-in-spring-boot-1-3"&gt;Spring Boot Devtools&lt;/a&gt; which should make re-starts much quicker. You should also look at using &lt;code&gt;@Lazy&lt;/code&gt; initialization if you have any of your own beans that are slow to create.&lt;/p&gt;&lt;h2&gt;&lt;a href="#spring-boot" class="anchor" name="spring-boot"&gt;&lt;/a&gt;Spring Boot&lt;/h2&gt;
&lt;p&gt;Spring Boot was launched at the end of 2013 to specifically address some of the common problems faced by users of Spring. Unfortunately I&amp;rsquo;ve seen the &lt;em&gt;&amp;ldquo;Spring is now so complex that it has its own framework.&amp;rdquo;&lt;/em&gt; quote paraphrased quite often. Spring Boot is intentionally distinct from the Spring Framework, it has different goals, different dependencies and a different release schedule. I prefer to think of Spring Framework as the raw ingredients, and Spring Boot as fully baked cake. You&amp;rsquo;re free to mix the ingredients in anyway you see fit, but who doesn&amp;rsquo;t like cake?&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/philwebb/media/master/hownottohate/spring-ingredients.jpg" alt="Ingredients" /&gt; &lt;img src="https://raw.githubusercontent.com/philwebb/media/master/hownottohate/boot-cake.jpg" alt="Cake" /&gt;&lt;/p&gt;&lt;h2&gt;&lt;a href="#choice-amp-open-source" class="anchor" name="choice-amp-open-source"&gt;&lt;/a&gt;Choice &amp;amp; Open Source&lt;/h2&gt;
&lt;p&gt;One of the greatest things about Open Source is that it gives you tremendous freedom. If you want Dependency Injection, but you&amp;rsquo;re not a fan of Spring, take a look at &lt;a href="https://github.com/google/guice"&gt;Guice&lt;/a&gt;. If you want to build a REST service, but you don&amp;rsquo;t like Spring MVC, try &lt;a href="http://ratpack.io/"&gt;Ratpack&lt;/a&gt;. If you want a well integrated, well tested, documented framework with a proven track record, try &lt;a href="http://start.spring.io"&gt;Spring&lt;/a&gt; with &lt;a href="http://start.spring.io"&gt;Spring Boot&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you want to change the way that your Open Source works, try &lt;a href="https://spring.io/blog/2013/09/20/contributing-to-spring-boot-with-a-pull-request"&gt;contributing&lt;/a&gt;!&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Tool Suite 3.7.2 released</title>
    <link rel="alternate" href="https://spring.io/blog/2015/11/27/spring-tool-suite-3-7-2-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Martin Lippert</name>
    </author>
    <id>tag:spring.io,2015-11-27:2310</id>
    <updated>2015-11-27T12:37:50Z</updated>
    <content type="html">&lt;p&gt;Dear Spring Community,&lt;/p&gt;
&lt;p&gt;I am happy to announce the 3.7.2 release of the Spring Tool Suite, our Eclipse-based tooling.&lt;/p&gt;
&lt;p&gt;STS 3.7.2 focuses on fixing existing issues and updating STS to work with the latest updates on Cloud Foundry, Spring, and the various Spring projects.&lt;/p&gt;
&lt;p&gt;The list of fixed issues include:&lt;/p&gt;
&lt;ul&gt;&#xD;
&lt;li&gt;Spring Boot Dashboard now works with the new Diego runtime on Cloud Foundry&lt;/li&gt;&#xD;
&lt;li&gt;Spring Boot 1.3.0 compatibility (due to updated spring components inside)&lt;/li&gt;&#xD;
&lt;li&gt;quick text search can now search for escaped * and ? characters&lt;/li&gt;&#xD;
&lt;li&gt;preliminary support for Eclipse Buildship (the new Gradle integration for Eclipse from Gradleware)&lt;/li&gt;&#xD;
&lt;/ul&gt;
&lt;p&gt;To download the distributions, please go visit:&lt;/p&gt;
&lt;ul&gt;&#xD;
&lt;li&gt;Spring Tool Suite: &lt;a href="https://spring.io/tools/sts/all"&gt;https://spring.io/tools/sts/all&lt;/a&gt;&lt;/li&gt;&#xD;
&lt;/ul&gt;
&lt;p&gt;Detailed new and noteworthy notes can be found here: &lt;a href="http://docs.spring.io/sts/nan/v372/NewAndNoteworthy.html"&gt;STS 3.7.2 New &amp;amp; Noteworthy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;STS 3.7.3 is scheduled to ship in early March 2016.&lt;/p&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>News for Spring Data JDBC Extensions Project</title>
    <link rel="alternate" href="https://spring.io/blog/2015/11/25/news-for-spring-data-jdbc-extensions-project" />
    <category term="releases" label="Releases" />
    <author>
      <name>Thomas Risberg</name>
    </author>
    <id>tag:spring.io,2015-11-25:2309</id>
    <updated>2015-11-25T15:16:00Z</updated>
    <content type="html">&lt;p&gt;We are pleased to announce the 1.2 release of the Spring Data JDBC Extensions project. This release updates the Querydsl dependency to 3.6.9 and adds an option to retrieve &lt;code&gt;SearchResults&lt;/code&gt; using the &lt;code&gt;QueryDslTemplate&lt;/code&gt;. See &lt;a href="http://docs.spring.io/spring-data/jdbc/docs/1.2.1.RELEASE/changelog.txt"&gt;changelog for 1.2.1.RELEASE&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We are also pleased to announce the first milestone of the 2.0 version of the Spring Data JDBC Extensions project. The big changes for this release are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;change to building with Java 7 or later&lt;/li&gt;
  &lt;li&gt;upgrading the Oracle JDBC to version 12.1.0.2&lt;/li&gt;
  &lt;li&gt;updating any dependencies to follow Spring IO Platform 2.0 including Spring Framework 4.2&lt;/li&gt;
  &lt;li&gt;removing the Querydsl SQL support in this version (see below)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The upgrade to use the Oracle JDBC driver version 12.1.0.2 allows us to change our code to support deprecations and new features available in this version. You can still use older database versions compatible with this driver including Oracle Database 12c R1, 11g R2 and 11g R1.&lt;/p&gt;
&lt;p&gt;See &lt;a href="http://docs.spring.io/spring-data/jdbc/docs/2.0.0.M1/changelog.txt"&gt;changelog for 2.0.0.M1&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;&lt;a href="#querydsl-support" class="anchor" name="querydsl-support"&gt;&lt;/a&gt;Querydsl support&lt;/h2&gt;
&lt;p&gt;The Querydsl project has been undergoing some changes for their 4.0 version with a change of Maven group id, package names and also some API changes. This means that as of Querydsl version 4.0.0 the existing Spring Data JDBC Extension code that integrates with Querydsl no longer works.&lt;/p&gt;
&lt;p&gt;We don&amp;rsquo;t plan to port our Querydsl SQL support to the new Querydsl version 4.0 or later. Instead we encourage users developing new projects to use the Querydsl SQL APIs directly and to use the integration with Spring that is available in the Querydsl project&amp;rsquo;s &lt;code&gt;querydsl-sql-spring&lt;/code&gt; sub-project. This means that we are removing the Querydsl SQL support from the new Spring Data JDBC Extensions 2.x version.&lt;/p&gt;
&lt;p&gt;For the 1.x version of Spring Data JDBC Extensions we will continue to use the latest available version of the Querydsl 3.x release series. We are also marking the Querydsl SQL support as deprecated to indicate that it will not be available in version 2.0 of Spring Data JDBC Extensions.&lt;/p&gt;
&lt;p&gt;For more project specific information please see the &lt;a href="http://projects.spring.io/spring-data-jdbc-ext/"&gt;project page&lt;/a&gt;.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Social 1.1.4 Released</title>
    <link rel="alternate" href="https://spring.io/blog/2015/11/25/spring-social-1-1-4-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Craig Walls</name>
    </author>
    <id>tag:spring.io,2015-11-25:2308</id>
    <updated>2015-11-25T14:27:53Z</updated>
    <content type="html">&lt;p&gt;Dear Spring Community,&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m pleased to announce the availability of Spring Social 1.1.4.RELEASE. This includes the Spring Social Core, Web, Security, and Config modules.&lt;/p&gt;
&lt;p&gt;This is a maintenance release, addressing a handful of bugs and introducing a few minor improvements (many of which were submitted as pull requests from our wonderful open-source community&amp;hellip;thanks!). View the &lt;a href="https://raw.githubusercontent.com/spring-projects/spring-social/master/src/dist/changelog.txt"&gt;changelog&lt;/a&gt; for full details.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://spring.io/projects/spring-social"&gt;Project Site&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-social/docs/1.1.4.RELEASE/reference/htmlsingle/"&gt;Reference&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-social/docs/1.1.4.RELEASE/apidocs/"&gt;JavaDoc&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Migrating Spring Cloud Apps from Spring Boot 1.2 to 1.3</title>
    <link rel="alternate" href="https://spring.io/blog/2015/11/25/migrating-spring-cloud-apps-from-spring-boot-1-2-to-1-3" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Dave Syer</name>
    </author>
    <id>tag:spring.io,2015-11-25:2307</id>
    <updated>2015-11-25T12:18:00Z</updated>
    <content type="html">&lt;p&gt;There are some interesting new features in &lt;a href="http://projects.spring.io/spring-boot/"&gt;Spring Boot&lt;/a&gt; 1.3 that are now available in Spring Cloud in the Brixton release train. The Angel release train of &lt;a href="http://projects.spring.io/spring-cloud/"&gt;Spring Cloud&lt;/a&gt; is partly incompatible with Spring Boot 1.3, so when you upgrade there are some important things to be aware of. This article helps you navigate the changes and update any existing apps to use the new features. It should also be helpful generally when trying to adopt new versions of Spring projects into existing codebases.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;TIP: You can use &lt;code&gt;mvn dependency:tree&lt;/code&gt; or &lt;code&gt;gradle dependencies&lt;/code&gt; to list the dependencies in your project and check the versions.&lt;/p&gt;
&lt;/blockquote&gt;&lt;h2&gt;&lt;a href="#dependency-management" class="anchor" name="dependency-management"&gt;&lt;/a&gt;Dependency Management&lt;/h2&gt;
&lt;p&gt;If you are using the older versions of Spring Boot, you probably have something like this in your Maven POM:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint xml"&gt;&amp;lt;parent&amp;gt;&#xD;
  &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&#xD;
  &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt;&#xD;
  &amp;lt;version&amp;gt;1.2.7.RELEASE&amp;lt;/version&amp;gt;&#xD;
  &amp;lt;relativePath /&amp;gt; &amp;lt;!-- lookup parent from repository --&amp;gt;&#xD;
&amp;lt;/parent&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint xml"&gt;&amp;lt;dependencyManagement&amp;gt;&#xD;
  &amp;lt;dependencies&amp;gt;&#xD;
    &amp;lt;dependency&amp;gt;&#xD;
      &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&#xD;
      &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt;&#xD;
      &amp;lt;version&amp;gt;1.2.7.RELEASE&amp;lt;/version&amp;gt;&#xD;
      &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;&#xD;
      &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt;&#xD;
    &amp;lt;/dependency&amp;gt;&#xD;
  &amp;lt;/dependencies&amp;gt;&#xD;
&amp;lt;/dependencyManagement&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or, if you are using Gradle,&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint groovy"&gt;buildscript {&#xD;
	ext {&#xD;
		springBootVersion = &amp;#39;1.2.7.RELEASE&amp;#39;&#xD;
	}&#xD;
	dependencies {&#xD;
		classpath(&amp;quot;org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}&amp;quot;)&#xD;
	}&#xD;
}&#xD;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To upgrade to Spring Boot 1.3.0 you would change the &amp;lsquo;1.2.7&amp;rsquo; above to &amp;lsquo;1.3.0&amp;rsquo;. So far so simple.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;TIP: to see a &amp;ldquo;typical&amp;rdquo; Maven POM with the most recent version of Spring Boot you can &lt;code&gt;curl start.spring.io/pom.xml&lt;/code&gt;. To add Spring Cloud you can append &lt;code&gt;-d style=cloud-config-client&lt;/code&gt;. The Spring Boot version can be changed by adding &lt;code&gt;-d bootVersion=1.3.1.BUILD-SNAPSHOT&lt;/code&gt; (for instance). To do the same for Gradle use &lt;code&gt;build.gradle&lt;/code&gt; instead of &lt;code&gt;pom.xml&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;&lt;h2&gt;&lt;a href="#using-spring-cloud-with-spring-boot" class="anchor" name="using-spring-cloud-with-spring-boot"&gt;&lt;/a&gt;Using Spring Cloud with Spring Boot&lt;/h2&gt;
&lt;p&gt;Since Spring Cloud builds on top of Spring Boot it can be confusing and difficult to find a combination that works together. In what follows we describe a few scenerios of upgrades and show what you can expect to be able to achieve with dependency management. &lt;/p&gt;&lt;h3&gt;&lt;a href="#the-big-upgrade" class="anchor" name="the-big-upgrade"&gt;&lt;/a&gt;The Big Upgrade&lt;/h3&gt;
&lt;p&gt;In general the biggest change will be when you upgrade (Spring Boot 1.2 to 1.3, or Spring Cloud Angel to Brixton). If you downloaded a project from the &lt;a href="https://start.spring.io"&gt;Spring Initializr&lt;/a&gt; then it will be using the Spring Boot parent POM:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint xml"&gt;&amp;lt;parent&amp;gt;&#xD;
  &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&#xD;
  &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt;&#xD;
  &amp;lt;version&amp;gt;1.2.7.RELEASE&amp;lt;/version&amp;gt;&#xD;
  &amp;lt;relativePath/&amp;gt; &amp;lt;!-- lookup parent from repository --&amp;gt;&#xD;
&amp;lt;/parent&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and a Spring Cloud BOM in the &lt;code&gt;&amp;lt;dependencyManagement&amp;gt;&lt;/code&gt; section:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint xml"&gt;&amp;lt;dependencyManagement&amp;gt;&#xD;
  &amp;lt;dependencies&amp;gt;&#xD;
    &amp;lt;dependency&amp;gt;&#xD;
      &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&#xD;
      &amp;lt;artifactId&amp;gt;spring-cloud-starter-parent&amp;lt;/artifactId&amp;gt;&#xD;
      &amp;lt;version&amp;gt;Angel.SR4&amp;lt;/version&amp;gt;&#xD;
      &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;&#xD;
      &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt;&#xD;
    &amp;lt;/dependency&amp;gt;&#xD;
  &amp;lt;/dependencies&amp;gt;&#xD;
&amp;lt;/dependencyManagement&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In Gradle you would see something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint groovy"&gt;buildscript {&#xD;
    ext {&#xD;
        springBootVersion = &amp;#39;1.2.7.RELEASE&amp;#39;&#xD;
    }&#xD;
    repositories {&#xD;
        mavenCentral()&#xD;
    }&#xD;
    dependencies {&#xD;
        classpath(&amp;quot;org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}&amp;quot;) &#xD;
    }&#xD;
}&#xD;
dependencyManagement {&#xD;
  imports { &#xD;
    mavenBom &amp;quot;org.springframework.cloud:spring-cloud-starter-parent:Angel.SR4&amp;quot; &#xD;
  }&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Simply updating the Spring Boot version in either case isn&amp;rsquo;t going to work because the Spring Cloud Angel BOM has old versions of Spring Boot and Spring (amongst other things). Thus we really need to upgrade both Spring Boot and Spring Cloud. For example in Maven:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint xml"&gt;&amp;lt;parent&amp;gt;&#xD;
  &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&#xD;
  &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt;&#xD;
  &amp;lt;version&amp;gt;1.3.0.RELEASE&amp;lt;/version&amp;gt;&#xD;
  &amp;lt;relativePath/&amp;gt; &amp;lt;!-- lookup parent from repository --&amp;gt;&#xD;
&amp;lt;/parent&amp;gt;&#xD;
&amp;lt;dependencyManagement&amp;gt;&#xD;
  &amp;lt;dependencies&amp;gt;&#xD;
    &amp;lt;dependency&amp;gt;&#xD;
      &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&#xD;
      &amp;lt;artifactId&amp;gt;spring-cloud-starter-parent&amp;lt;/artifactId&amp;gt;&#xD;
      &amp;lt;version&amp;gt;Brixton.M3&amp;lt;/version&amp;gt;&#xD;
      &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;&#xD;
      &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt;&#xD;
    &amp;lt;/dependency&amp;gt;&#xD;
  &amp;lt;/dependencies&amp;gt;&#xD;
&amp;lt;/dependencyManagement&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and in Gradle:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint groovy"&gt;buildscript {&#xD;
    ext {&#xD;
        springBootVersion = &amp;#39;1.3.0.RELEASE&amp;#39;&#xD;
    }&#xD;
    repositories {&#xD;
        mavenCentral()&#xD;
    }&#xD;
    dependencies {&#xD;
        classpath(&amp;quot;org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}&amp;quot;) &#xD;
    }&#xD;
}&#xD;
dependencyManagement {&#xD;
  imports { &#xD;
    mavenBom &amp;quot;org.springframework.cloud:spring-cloud-starter-parent:Brixton.M3&amp;quot; &#xD;
  }&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NOTE: Brixton.M2 and all earlier releases of Spring Cloud are &lt;em&gt;not&lt;/em&gt; compatible with Spring Boot 1.3.0.RELEASE. You need at least Brixton.M3.&lt;/p&gt;&lt;h2&gt;&lt;a href="#upgrading-spring-boot-beyond-1-3-0" class="anchor" name="upgrading-spring-boot-beyond-1-3-0"&gt;&lt;/a&gt;Upgrading Spring Boot Beyond 1.3.0&lt;/h2&gt;
&lt;p&gt;Suppose you want to use Spring Boot snapshots, or upgrade to 1.3.1 when it is released, but Spring Cloud doesn&amp;rsquo;t have a version that explicitly depends on the version of Boot you want.&lt;/p&gt;
&lt;p&gt;In Maven, remember that if you use one of the off the shelf parent POMs they contain &lt;code&gt;&amp;lt;dependencyManagement&amp;gt;&lt;/code&gt; and will take precedence. With that in mind, if you use those parent POMs, be sure to use the parent with the closest dependency set to what you need (the Boot one in this scenario).&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint xml"&gt;&amp;lt;parent&amp;gt;&#xD;
  &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&#xD;
  &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt;&#xD;
  &amp;lt;version&amp;gt;1.3.1.BUILD-SNAPSHOT&amp;lt;/version&amp;gt;&#xD;
  &amp;lt;relativePath/&amp;gt; &amp;lt;!-- lookup parent from repository --&amp;gt;&#xD;
&amp;lt;/parent&amp;gt;&#xD;
&amp;lt;dependencyManagement&amp;gt;&#xD;
  &amp;lt;dependencies&amp;gt;&#xD;
    &amp;lt;dependency&amp;gt;&#xD;
      &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&#xD;
      &amp;lt;artifactId&amp;gt;spring-cloud-starter-parent&amp;lt;/artifactId&amp;gt;&#xD;
      &amp;lt;version&amp;gt;Brixton.M3&amp;lt;/version&amp;gt;&#xD;
      &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;&#xD;
      &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt;&#xD;
    &amp;lt;/dependency&amp;gt;&#xD;
  &amp;lt;/dependencies&amp;gt;&#xD;
&amp;lt;/dependencyManagement&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In Gradle things are in principle simpler because there is no concept of a &amp;ldquo;parent&amp;rdquo;. In practice the Spring Boot plugin cannot be applied with a different version than the dependency management unless you also manually apply the dependency management plugin as well. So you have to do a little dance in the &lt;code&gt;build.gradle&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint groovy"&gt;buildscript {&#xD;
    ext {&#xD;
        springBootVersion = &amp;#39;1.3.0.RELEASE&amp;#39;&#xD;
    }&#xD;
    repositories {&#xD;
        mavenCentral()&#xD;
    }&#xD;
    dependencies {&#xD;
        classpath &amp;quot;io.spring.gradle:dependency-management-plugin:0.5.3.RELEASE&amp;quot;&#xD;
        classpath(&amp;quot;org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}&amp;quot;) &#xD;
    }&#xD;
}&#xD;
&#xD;
apply plugin: &amp;quot;io.spring.dependency-management&amp;quot;&#xD;
...&#xD;
&#xD;
dependencyManagement {&#xD;
  imports { &#xD;
    mavenBom &amp;quot;org.springframework.cloud:spring-cloud-starter-parent:Brixton.M3&amp;quot; &#xD;
    mavenBom &amp;quot;org.springframework.bootspring-boot-starter-parent:1.3.1.BUILD-SNAPSHOT&amp;quot; &#xD;
  }&#xD;
}&#xD;
&#xD;
apply plugin: &amp;#39;spring-boot&amp;#39; &#xD;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The rule is you have to a) import the dependency management plugin manually and &lt;em&gt;before&lt;/em&gt; the Spring Boot one, b) declare the &lt;code&gt;dependencyManagement&lt;/code&gt; &lt;em&gt;before&lt;/em&gt; applying the Spring Boot plugin. Once you do that you can list dependencies in the &lt;code&gt;dependencyManagement&lt;/code&gt; declaration and the &lt;em&gt;last&lt;/em&gt; one wins (the opposite to Maven).&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;NOTE: This sensitivity to the order of the declarations is a &amp;ldquo;feature&amp;rdquo; of the current version of the tooling. It might be different in future versions. See &lt;a href="https://github.com/spring-gradle-plugins/dependency-management-plugin/issues/66"&gt;this issue in the Gradle tooling&lt;/a&gt; for more details.&lt;/p&gt;
&lt;/blockquote&gt;&lt;h2&gt;&lt;a href="#using-maven-with-a-custom-parent" class="anchor" name="using-maven-with-a-custom-parent"&gt;&lt;/a&gt;Using Maven with a Custom Parent&lt;/h2&gt;
&lt;p&gt;If you don&amp;rsquo;t use the off the shelf parent POMs you have the freedom yo use one that does &lt;em&gt;not&lt;/em&gt; contain &lt;code&gt;&amp;lt;dependencyManagement&amp;gt;&lt;/code&gt;, and this makes things easier to control. In this case you need to put both Spring Boot and Spring Cloud in the &lt;code&gt;&amp;lt;dependencyManagement&amp;gt;&lt;/code&gt; and the order is significant: the first one wins (last one for Gradle). For example, to use Spring Boot 1.3.1.BUILD-SNAPSHOT and Spring Cloud Brixton.M3 in Maven:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint xml"&gt;&amp;lt;dependencyManagement&amp;gt;&#xD;
  &amp;lt;dependencies&amp;gt;&#xD;
    &amp;lt;dependency&amp;gt;&#xD;
      &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&#xD;
      &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt;&#xD;
      &amp;lt;version&amp;gt;1.3.1.BUILD-SNAPSHOT&amp;lt;/version&amp;gt;&#xD;
      &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;&#xD;
      &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt;&#xD;
    &amp;lt;/dependency&amp;gt;&#xD;
    &amp;lt;dependency&amp;gt;&#xD;
      &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&#xD;
      &amp;lt;artifactId&amp;gt;spring-cloud-starter-parent&amp;lt;/artifactId&amp;gt;&#xD;
      &amp;lt;version&amp;gt;Brixton.M3&amp;lt;/version&amp;gt;&#xD;
      &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;&#xD;
      &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt;&#xD;
    &amp;lt;/dependency&amp;gt;&#xD;
  &amp;lt;/dependencies&amp;gt;&#xD;
&amp;lt;/dependencyManagement&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a href="#order-of-the-boms" class="anchor" name="order-of-the-boms"&gt;&lt;/a&gt;Order of the BOMs&lt;/h2&gt;
&lt;p&gt;Note that in both Maven and Gradle the order of the BOMs is significant: the one that is declared first generally wins in Maven (last one in Gradle) if there is a conflict at the top level (explicitly declared dependencies). A big difference with Maven is that the parent is special: if it contains &lt;code&gt;&amp;lt;dependencyManagement&amp;gt;&lt;/code&gt; it always wins.&lt;/p&gt;
&lt;p&gt;To understand if a particular dependency version will resolve in the way you need is complicated. It depends on the order of the BOMs, &lt;em&gt;and&lt;/em&gt; the depth in the transitive dependency tree that your dependency is declared. For instance, the Spring Boot BOM declares an explicit (level 1) dependency management for &lt;code&gt;spring-core&lt;/code&gt; but not on any other Spring Framework jars (those are brought in via a reference to the Spring Framework BOM). The rule is that the first time it is declared wins, but the whole tree is included (including all BOMs), searching from the top, level by level.&lt;/p&gt;
&lt;p&gt;NOTE: Gradle does not have this &amp;ldquo;last one wins&amp;rdquo; rule without the Spring Boot (or Spring Dependency Management) Plugin. To do the same thing with a &amp;ldquo;native&amp;rdquo; Gradle build often requires careful and tedious work manually fixing transitive dependency versions.&lt;/p&gt;&lt;h2&gt;&lt;a href="#further-manipulating-dependency-versions" class="anchor" name="further-manipulating-dependency-versions"&gt;&lt;/a&gt;Further Manipulating Dependency Versions&lt;/h2&gt;
&lt;p&gt;If you want to bump the version of a dependency beyond what is specified in the Spring Boot and Spring Cloud BOMs, things can get complicated. Broadly speaking there are 2 options: properties and additional BOMs. The first (properties) works with the off the shelf parent POMs, and the other doesn&amp;rsquo;t. The second (more BOMs) only works if there &lt;em&gt;is&lt;/em&gt; a BOM available for the dependency you are interested in, and only if the transitive dependencies don&amp;rsquo;t conflict with your requirements. All of the Spring Cloud projects have their own BOM, for instance, as does Spring Framework, so that&amp;rsquo;s a start. &lt;/p&gt;&lt;h3&gt;&lt;a href="#properties" class="anchor" name="properties"&gt;&lt;/a&gt;Properties&lt;/h3&gt;
&lt;p&gt;The Spring Boot parent POM (and the Spring Cloud one if you use that since it inherits from the Boot one) has all of its dependency versions extracted into &lt;code&gt;&amp;lt;properties/&amp;gt;&lt;/code&gt;. So you can often just change the property value. Example in Maven:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint xml"&gt;&amp;lt;parent&amp;gt;&#xD;
  &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&#xD;
  &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt;&#xD;
  &amp;lt;version&amp;gt;1.3.0.RELEASE&amp;lt;/version&amp;gt;&#xD;
  &amp;lt;relativePath/&amp;gt; &amp;lt;!-- lookup parent from repository --&amp;gt;&#xD;
&amp;lt;/parent&amp;gt;&#xD;
&amp;lt;properties&amp;gt;&#xD;
  &amp;lt;spring.version&amp;gt;4.2.4.BUILD-SNAPSHOT&amp;lt;/spring.version&amp;gt;&#xD;
&amp;lt;/properties&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There corresponding feature in Gradle is an &lt;code&gt;ext&lt;/code&gt; property, e.g.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint groovy"&gt;ext[&amp;#39;spring.version&amp;#39;] = &amp;#39;4.2.4.BUILD-SNAPSHOT&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;a href="#additional-boms" class="anchor" name="additional-boms"&gt;&lt;/a&gt;Additional BOMs&lt;/h3&gt;
&lt;p&gt;The Spring Framework has its own BOM, so we can use that to manage the Spring versions instead. In Maven with a custom parent (containing no &lt;code&gt;&amp;lt;dependencyManagement&amp;gt;&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint xml"&gt;&amp;lt;dependencyManagement&amp;gt;&#xD;
  &amp;lt;dependencies&amp;gt;&#xD;
    &amp;lt;dependency&amp;gt;&#xD;
      &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;&#xD;
      &amp;lt;artifactId&amp;gt;spring-framework-bom&amp;lt;/artifactId&amp;gt;&#xD;
      &amp;lt;version&amp;gt;4.2.4.BUILD-SNAPSHOT&amp;lt;/version&amp;gt;&#xD;
      &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;&#xD;
      &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt;&#xD;
    &amp;lt;/dependency&amp;gt;&#xD;
  &amp;lt;/dependencies&amp;gt;&#xD;
&amp;lt;/dependencyManagement&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
  &lt;p&gt;NOTE: this example actually will &lt;em&gt;not&lt;/em&gt; work with the Spring Boot parent POM (unless it happens to have the same &lt;code&gt;&amp;lt;spring.version/&amp;gt;&lt;/code&gt;) because the Spring Framework version is fixed already by the parent. To use the Spring Boot parent with a Spring Framwork snapshot it is better to use the properties approach (above).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In Gradle it is simpler (because there is no parent to set conflicting versions):&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint groovy"&gt;dependencyManagement {&#xD;
	imports { &#xD;
      mavenBom &amp;quot;org.springframework:spring-framework-bom:4.2.4.BUILD-SNAPSHOT&amp;quot; &#xD;
      mavenBom &amp;quot;org.springframework.boot:spring-boot-starter-parent:1.3.0.RELEASE&amp;quot; &#xD;
	}&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a href="#conclusion" class="anchor" name="conclusion"&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Dependency management is hard, but hopefully we have softened the blow by outlining a few common scenarios when upgrading bits of Spring Boot and Spring Cloud. There are some slightly different behaviours depending on whether you choose Maven or Gradle, but at least if you choose Gradle and use the Spring Boot plugin the differences are minimized. At the end of the day, Spring projects have different release schedules, so there can always be conflicts, but they will generally always be moving towards convergence, so if you wait long enough things will equalize. Umbrella projects like Spring Cloud, Spring Boot and the Spring IO Platform also help to smooth out the bumps: if you can use one of those to manage all your dependencies things get a lot simpler.&lt;/p&gt;
&lt;p&gt;The sample apps in the Spring Guides have all been updated to Spring Boot 1.3 now, even if that means they depend on a milestone of Spring Cloud (this only applies to the Zuul proxy sample). Many do not need Spring Cloud any more. If you need a GA version of Spring Cloud you need to stay with Spring Boot 1.2 right now. The samples for that combination can be lifted from git history.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - November 23, 2015</title>
    <link rel="alternate" href="https://spring.io/blog/2015/11/24/this-week-in-spring-november-23-2015" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2015-11-24:2305</id>
    <updated>2015-11-24T11:00:00Z</updated>
    <content type="html">&lt;p&gt;Welcome to another installation of &lt;em&gt;This Week in Spring&lt;/em&gt;! Here in the US it&amp;rsquo;s the week of Thanksgiving, where - hopefully - we take a moment to note the many things for which we&amp;rsquo;re thankful. I&amp;rsquo;m sure I speak for the whole team here at Pivotal when I say: we&amp;rsquo;re thankful for you, dear community. Thank you.&lt;/p&gt;
&lt;p&gt;And so, as usual, we&amp;rsquo;ve got a lot to get to it. All the better, in fact, for the lazy hours after turkey! &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Dr. Mark Pollack has just announced the release &lt;a href="http://spring.io/blog/2015/11/19/spring-xd-1-3-ga-and-flo-for-spring-xd-1-0-ga-released"&gt;of Spring XD 1.3 GA and Spring Flo for Spring XD 1.0&lt;/a&gt;. This is a &lt;em&gt;huge&lt;/em&gt; release! Spring XD 1.3.0 supports job composition DSLs, Spring Flo for Spring XD, an improved Admin UI, Spark 1.3.1, updates to the Spring Data and Spring for Hadoop distributions, a Cassandra Sink and &lt;em&gt;much&lt;/em&gt; more! It is also the last in the line before Spring XD completes its journey to the archhitecture already partially laid out in Spring Cloud Stream and Spring Cloud Dataflow! This is an exciting evolution of the technology!&lt;/li&gt;
  &lt;li&gt;Spring Security and Spring Session lead &lt;a href="http://spring.io/blog/2015/11/17/spring-session-1-1-0-m1-released"&gt;Rob Winch has just announced Spring Session 1.1.0.M1&lt;/a&gt; complete with a lot of new features: searching HTTP sessions by username, &lt;code&gt;HttpSessionListener&lt;/code&gt; support, customized &lt;code&gt;Cookie&lt;/code&gt; creation, overriding the default &lt;code&gt;RedisSerializer&lt;/code&gt;, and Hazelcast configuration and support.&lt;/li&gt;
  &lt;li&gt;the amazing Andy Wilkinson just &lt;a href="http://spring.io/blog/2015/11/18/spring-io-platform-2-0-0-release"&gt;announced the Spring IO Platform 2.0.0.RELEASE&lt;/a&gt;! The Spring IO platform is a great way to mange your dependencies, in the same way that the Spring Boot dependency management section does, but with an eye towards supporting a) longer terms of stability and b) supporting &lt;em&gt;all&lt;/em&gt; Spring projects, not just those supported by Spring Boot. It&amp;rsquo;s a &lt;em&gt;wonderful&lt;/em&gt; solution for managing applications.&lt;/li&gt;
  &lt;li&gt;Spring Statemachine lead Janne Valkealahti has &lt;a href="http://spring.io/blog/2015/11/20/spring-statemachine-1-0-1-released"&gt;just announced 1.0.1&lt;/a&gt; which includes a new &lt;code&gt;@EnableStateMachine&lt;/code&gt; annotation, updates to 4.2.2, and several fixes.&lt;/li&gt;
  &lt;li&gt;friend to the Pivotal community Dan Vega talks about &lt;a href="http://therealdanvega.com/blog/2015/11/17/spring-boot-introduction-course"&gt;his just released Udemy course on using Spring Boot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Mattias Severson&amp;rsquo;s post explains how to use the Gradle Spring Boot plugin to ensure that a project a project - &lt;a href="http://www.jayway.com/2015/11/23/reusing-spring-boots-dependency-management/"&gt;that doesn&amp;rsquo;t otherwise use or depend on Spring Boot - gets the same versions as if it did&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;This slide deck &lt;a href="https://speakerdeck.com/toedter/cool-web-apps-with-spring-boot-angularjs-and-typescript"&gt;&lt;em&gt;Cool Web Apps with Spring Boot, AngularJS &amp;amp; TypeScript&lt;/em&gt; by Kai Toedter seemed pretty interesting!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;the Stormpath Java developer evangelist &lt;a href="https://www.youtube.com/watch?v=5Cs6GahGSjE"&gt;Micah Silverman just blogged about their new Stormpath Spring Boot auto-configuration&lt;/a&gt;. &lt;a href="http://www.slideshare.net/stormpath/stormpath-101-spring-boot-spring-security"&gt;The slides are available online, as well&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://activiti.org"&gt;Activiti&lt;/a&gt; ninja Joram Barrez blogged about the &lt;a href="http://www.jorambarrez.be/blog/category/spring-2/"&gt;recent addition of the Activiti auto-configuration&lt;/a&gt; to the &lt;a href="http://start.spring.io"&gt;Spring Initializr&lt;/a&gt;, complete with a cool demo!&lt;/li&gt;
  &lt;li&gt;Dan also did a nice video about one of the features &lt;a href="https://www.youtube.com/watch?v=JAOsHylYj9o&amp;feature=youtu.be&amp;a"&gt;in Spring Boot 1.3 that&amp;rsquo;s sweeping the nation: the color ASCII art banners&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>Spring Statemachine 1.0.1 Released</title>
    <link rel="alternate" href="https://spring.io/blog/2015/11/20/spring-statemachine-1-0-1-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Janne Valkealahti</name>
    </author>
    <id>tag:spring.io,2015-11-20:2304</id>
    <updated>2015-11-20T17:38:41Z</updated>
    <content type="html">&lt;p&gt;We’re pleased to announce a first maintenance release of &lt;a href="http://projects.spring.io/spring-statemachine"&gt;Spring Statemachine 1.0.1&lt;/a&gt;. Artifacts are available either from &lt;a href="http://repo1.maven.org/maven2/org/springframework/statemachine/"&gt;Maven Central&lt;/a&gt; or from &lt;a href="http://repo.spring.io/libs-release/org/springframework/statemachine/"&gt;Spring Repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Changes in version 1.0.1 (2015-11-18)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;autoStart via @EnableStateMachineFactory doesn&amp;rsquo;t work [#113]&lt;/li&gt;
  &lt;li&gt;Update to framework 4.2.2 [#115]&lt;/li&gt;
  &lt;li&gt;Association with @EnableStateMachine and @WithStateMachine [#116]&lt;/li&gt;
  &lt;li&gt;EnableStateMachineFactory fails when there are 2 state machine configurations [#117]&lt;/li&gt;
  &lt;li&gt;PersistStateMachineHandler returning event outcome [#118]&lt;/li&gt;
  &lt;li&gt;NPE with missing configurer [#119]&lt;/li&gt;
  &lt;li&gt;Context events not working with StateMachineBuilder [#120]&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>Spring XD 1.3 GA and Flo for Spring XD 1.0 GA released</title>
    <link rel="alternate" href="https://spring.io/blog/2015/11/19/spring-xd-1-3-ga-and-flo-for-spring-xd-1-0-ga-released" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Mark Pollack</name>
    </author>
    <id>tag:spring.io,2015-11-19:2303</id>
    <updated>2015-11-19T23:20:00Z</updated>
    <content type="html">&lt;p&gt;Today we are pleased to announce the general availability of Spring XD 1.3 and Flo for Spring XD 1.0.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Spring XD 1.3 GA: &lt;a href="http://repo.spring.io/libs-milestone/org/springframework/xd/spring-xd/1.3.0.RELEASE/spring-xd-1.3.0.RELEASE-dist.zip"&gt;zip&lt;/a&gt;, &lt;a href="http://docs.spring.io/spring-xd/docs/1.3.0.RELEASE/reference/html/#osx-homebrew-installation"&gt;brew&lt;/a&gt; and &lt;a href="http://docs.spring.io/spring-xd/docs/1.3.0.RELEASE/reference/html/#redhatcentos-installation"&gt;rpm&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Flo for Spring XD 1.0 GA: &lt;a href="https://network.pivotal.io/products/p-spring-flo/"&gt;zip&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In addition to bug fixes we have also added several new features in the 1.3 release line&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://docs.spring.io/spring-xd/docs/1.3.0.RELEASE/reference/html/#composed-jobs"&gt;Job Composition DSL&lt;/a&gt; allows for the creation of a complex graph of job executions.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://blog.pivotal.io/big-data-pivotal/features/the-new-flo-for-spring-xd"&gt;Flo for Spring XD&lt;/a&gt; designer supports creating &lt;a href="http://docs.pivotal.io/spring-flo/building-composed-jobs.html"&gt;composed jobs&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Admin UI supports execution history of composed jobs.&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://docs.spring.io/spring-xd/docs/1.3.0.RELEASE/reference/html/#cassandra"&gt;Cassandra Sink&lt;/a&gt; and &lt;a href="http://docs.spring.io/spring-xd/docs/1.3.0.RELEASE/reference/html/#header-enricher"&gt;Header Enricher Processor&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://docs.spring.io/spring-xd/docs/1.3.0.RELEASE/reference/html/#gpfdist"&gt;Gpfdist sink&lt;/a&gt; now supports update operations and full range of control file options&lt;/li&gt;
  &lt;li&gt;Spark 1.3.1 Support&lt;/li&gt;
  &lt;li&gt;A timeout value for flushing writes to HDFS in order to ensure data is persisted on the HDFS DataNode’s disks.&lt;/li&gt;
  &lt;li&gt;General dependency upgrades, Spring Data Gosling, SI 4.2, and Boot 1.2&lt;/li&gt;
  &lt;li&gt;Hadoop distribution version updates to Apache Hadoop 2.7.1 and Hortonworks Data Platform 2.2. Pivotal Hadoop 2.1, 3.0 and Cloudera Hadoop 5.3&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The next release line introduces a major redesign to the underlying architecture and breaking up Spring XD into several independent projects. Building upon Spring Boot and Spring Cloud capabilities, Spring XD is actively being redesigned as &lt;a href="http://cloud.spring.io/spring-cloud-dataflow/"&gt;Spring Cloud Data Flow&lt;/a&gt; - a cloud native programming and operating model for composable message-driven microservices. More details can be found in the blog posts: &lt;a href="http://blog.pivotal.io/pivotal-cloud-foundry/products/introducing-spring-cloud-data-flow"&gt;Introducing Spring Cloud Data Flow&lt;/a&gt; and &lt;a href="http://blog.pivotal.io/pivotal-perspectives/features/a-quick-look-at-spring-cloud-data-flow"&gt;A Quick Look At Spring Cloud Data Flow&lt;/a&gt;. InfoQ also summarizes the changes in the article &lt;a href="http://www.infoq.com/news/2015/09/spring-cloud-data-flow"&gt;SpringXD being Re-architected and Re-branded to Spring Cloud Data Flow&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Feedback is very important, so please get in touch with questions and comments via&lt;br/&gt;* &lt;a href="http://stackoverflow.com/questions/tagged/spring-xd"&gt;StackOverflow&lt;/a&gt; &lt;code&gt;spring-xd&lt;/code&gt; tag&lt;br/&gt;* &lt;a href="https://jira.spring.io/browse/XD/?selectedTab=com.atlassian.jira.jira-projects-plugin:summary-panel"&gt;Spring JIRA&lt;/a&gt; or &lt;a href="https://github.com/spring-projects/spring-xd/issues"&gt;GitHub Issues&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring IO Platform 2.0.0.RELEASE</title>
    <link rel="alternate" href="https://spring.io/blog/2015/11/18/spring-io-platform-2-0-0-release" />
    <category term="releases" label="Releases" />
    <author>
      <name>Andy Wilkinson</name>
    </author>
    <id>tag:spring.io,2015-11-18:2302</id>
    <updated>2015-11-18T11:35:00Z</updated>
    <content type="html">&lt;p&gt;Spring IO Platform 2.0.0.RELEASE is now available from the &lt;a href="https://repo.spring.io/release"&gt;Spring release repository&lt;/a&gt; and Maven Central.&lt;/p&gt;
&lt;p&gt;Additions:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Spring REST Docs 1.0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Major upgrades:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Reactor 2.0&lt;/li&gt;
  &lt;li&gt;Spring Security 4.0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Minor upgrades:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Spring AMQP 1.5&lt;/li&gt;
  &lt;li&gt;Spring Boot 1.3&lt;/li&gt;
  &lt;li&gt;Spring Cloud Connectors 1.2&lt;/li&gt;
  &lt;li&gt;Spring Data Gosling&lt;/li&gt;
  &lt;li&gt;Spring Framework 4.2&lt;/li&gt;
  &lt;li&gt;Spring HATEOAS 0.19&lt;/li&gt;
  &lt;li&gt;Spring Integration 4.2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A number of other Spring projects and their dependencies have also been updated to their latest maintenance releases.&lt;/p&gt;
&lt;p&gt;Please note that a number of dependencies that were previously part of the Platform have been removed or replaced in this release. Please refer to &lt;a href="http://docs.spring.io/platform/docs/2.0.0.RELEASE/reference/htmlsingle/#upgrading-dependency-management"&gt;the documentation&lt;/a&gt; for further details.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://platform.spring.io/platform"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-io/platform"&gt;GitHub&lt;/a&gt; | &lt;a href="https://github.com/spring-io/platform/issues"&gt;Issues&lt;/a&gt; | &lt;a href="http://docs.spring.io/platform/docs/2.0.0.RELEASE/reference/htmlsingle"&gt;Documentation&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Session 1.1.0.M1 Released</title>
    <link rel="alternate" href="https://spring.io/blog/2015/11/17/spring-session-1-1-0-m1-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Rob Winch</name>
    </author>
    <id>tag:spring.io,2015-11-17:2301</id>
    <updated>2015-11-17T20:50:57Z</updated>
    <content type="html">&lt;p&gt;On behalf of the community, I&amp;rsquo;m pleased to announce the release of Spring Session 1.1.0.M1. &lt;a href="https://repo.spring.io/milestone/org/springframework/session/spring-session-data-redis/1.1.0.M1/"&gt;The release&lt;/a&gt; can be found in the &lt;a href="https://github.com/spring-projects/spring-framework/wiki/Spring-repository-FAQ#what-repositories-are-available"&gt;Spring Milestone Repository&lt;/a&gt; (&lt;a href="https://repo.spring.io/milestone/)"&gt;https://repo.spring.io/milestone/)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This release contains lots of fixes and new features. You can find a complete list in the &lt;a href="https://github.com/spring-projects/spring-session/issues?utf8=%E2%9C%93&amp;q=milestone%3A%221.1.0+M1%22"&gt;changelog&lt;/a&gt;. The highlights have been included below:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Support for &lt;a href="http://docs.spring.io/spring-session/docs/1.1.0.M1/reference/html5/guides/findbyusername.html"&gt;search for session by username&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Support &lt;a href="http://docs.spring.io/spring-session/docs/1.1.0.M1/reference/html5/guides/custom-cookie.html"&gt;Customize Cookie Creation&lt;/a&gt;. Thanks to everyone who provided PRs and feedback for this feature!&lt;/li&gt;
  &lt;li&gt;Add &lt;a href="http://docs.spring.io/spring-session/docs/1.1.0.M1/reference/html5/#httpsession-httpsessionlistener"&gt;HttpSessionListener&lt;/a&gt; support&lt;/li&gt;
  &lt;li&gt;Allow &lt;a href="https://github.com/spring-projects/spring-session/issues/283"&gt;override default RedisSerializer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Added comprehensive &lt;a href="http://docs.spring.io/spring-session/docs/1.1.0.M1/reference/html5/guides/hazelcast-spring.html"&gt;Hazelcast and configuration support&lt;/a&gt;. Thanks &lt;a href="https://twitter.com/_mark_a"&gt;@_mark_a&lt;/a&gt; and &lt;a href="https://twitter.com/tommyludwig"&gt;@tommyludwig&lt;/a&gt;!&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-projects/spring-session/issues/271"&gt;Performance improvements&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Allow scoping the session in Redis using &lt;a href="http://docs.spring.io/spring-session/docs/1.1.0.M1/reference/html5/#api-redisoperationssessionrepository-config"&gt;redisNamespace&lt;/a&gt;. Thanks &lt;a href="https://github.com/fstegmann"&gt;fstegmann&lt;/a&gt;!&lt;/li&gt;
  &lt;li&gt;Add &lt;a href="https://github.com/spring-projects/spring-session/issues/272"&gt;ExpiringSession.setLastAccessedTime(long)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://projects.spring.io/spring-session/"&gt;Site&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-session/docs/1.1.0.M1/reference/html5/"&gt;Documentation&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-session/issues"&gt;Issues&lt;/a&gt; | &lt;a href="http://stackoverflow.com/questions/tagged/spring-session"&gt;Help&lt;/a&gt; &lt;/p&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - November 17, 2015</title>
    <link rel="alternate" href="https://spring.io/blog/2015/11/17/this-week-in-spring-november-17-2015" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2015-11-17:2300</id>
    <updated>2015-11-17T08:28:45Z</updated>
    <content type="html">&lt;p&gt;My goodness the time has flown! We&amp;rsquo;re already staring down the beginning of 2016!&lt;/p&gt;
&lt;p&gt;Welcome to another installation of &lt;em&gt;This Week in Spring&lt;/em&gt;! This week I&amp;rsquo;m in beautiful Casablanca, Morocco for Devoxx Morocco! This is the fifth Devoxx this year - with events in Belgium, UK, France, Poland and now Morocco - and I have the rare honor of having spoken at all of them! #fullDevoxx&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ve got a lot to cover this week so let&amp;rsquo;s get to it!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://spring.io/blog/2015/11/16/spring-boot-1-3-0-released"&gt;&lt;strong&gt;Spring Boot 1.3 has just been released&lt;/strong&gt;&lt;/a&gt;! This is the most epic release of Spring Boot yet and I won&amp;rsquo;t even &lt;em&gt;try&lt;/em&gt; to do the release notes! Just go check it out and visit the &lt;a href="http://start.spring.io"&gt;Spring Initialzr&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://spring.io/blog/2015/11/16/spring-framework-4-2-3-available-now"&gt;Spring framework 4.2.3 has just been released&lt;/a&gt;!&lt;/li&gt;
  &lt;li&gt;Netflix have just announced the open-sourcing &lt;a href="http://techblog.netflix.com/2015/11/global-continuous-delivery-with.html"&gt;of their build-and-bake pipeline for continuous delivery - project Spinnaker&lt;/a&gt;. It&amp;rsquo;s interesting for lots of reasons, but one of them is that it&amp;rsquo;s written using Spring Boot!&lt;/li&gt;
  &lt;li&gt;I&amp;rsquo;ll be coming &lt;a href="http://www.meetup.com/DC-Cloud-Native-Meetup/events/226775603/?a=socialmedia"&gt;to Washington DC with several of my cloudiest friends&lt;/a&gt; - join us!&lt;/li&gt;
  &lt;li&gt;There&amp;rsquo;s a new checkbox on &lt;a href="http://start.spring.io"&gt;the Spring Initializr&lt;/a&gt; to enable the &lt;a href="https://github.com/dsyer/spring-boot-ratpack"&gt;Ratpack&lt;/a&gt; &lt;a href="http://ratpack.io/manual/current/spring.html"&gt;Spring Boot integration&lt;/a&gt;!&lt;/li&gt;
  &lt;li&gt;There&amp;rsquo;s also a new checkbox on &lt;a href="http://start.spring.io"&gt;the Spring Initializr&lt;/a&gt; to enable &lt;a href="https://spring.io/blog/2015/03/08/getting-started-with-activiti-and-spring-boot"&gt;Activiti&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=7cemYpV1fNI"&gt;Stephane Nicoll and Brian Clozel gave a great talk&lt;/a&gt; introducing Spring Boot at last week&amp;rsquo;s Devoxx BE&lt;/li&gt;
  &lt;li&gt;I gave a talk introducing &lt;a href="https://www.youtube.com/watch?v=SFDYdslOvu8"&gt;Spring Cloud&lt;/a&gt; at the same show&lt;/li&gt;
  &lt;li&gt;and the amazing Oliver Gierke &lt;a href="https://www.youtube.com/watch?v=NVB2AmMRUBI"&gt;gave a talk introducing the latest-and-greatest in Spring Data&lt;/a&gt;, also at Devoxx BE&lt;/li&gt;
  &lt;li&gt;our pal Matti Tahvonen, from Vaadin, has put together &lt;a href="https://www.liferay.com/web/matti/blog/-/blogs/using-spring-data-jpa-with-a-liferay-portlet"&gt;a very cool post on using Spring Boot, Spring Data, etc., with Vaadin and Portlets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>Spring Boot 1.3.0 released</title>
    <link rel="alternate" href="https://spring.io/blog/2015/11/16/spring-boot-1-3-0-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Phil Webb</name>
    </author>
    <id>tag:spring.io,2015-11-15:2296</id>
    <updated>2015-11-16T12:36:28Z</updated>
    <content type="html">&lt;p&gt;One behalf of the Spring Boot team, and everyone that has contributed, I am pleased to announce that Spring Boot 1.3.0 has been released and is available now from &lt;a href="http://repo.spring.io/release/"&gt;repo.spring.io&lt;/a&gt;, &lt;a href="http://search.maven.org/#search|ga|1|g%3A%22org.springframework.boot%22"&gt;Maven Central&lt;/a&gt; and &lt;a href="https://bintray.com/bintray/jcenter/org.springframework.boot%3Aspring-boot/view"&gt;Bintray&lt;/a&gt;. This release adds a significant number of new features and improvements and builds on the latest release of the Spring Framework. For full &lt;a href="https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-1.3-Release-Notes#upgrading-from-spring-boot-12"&gt;upgrade instructions&lt;/a&gt; and &lt;a href="https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-1.3-Release-Notes#new-and-noteworthy"&gt;&amp;ldquo;new and noteworthy&amp;rdquo;&lt;/a&gt; features please see the &lt;a href="https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-1.3-Release-Notes"&gt;release notes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here are some of the highlights of v1.3:&lt;/p&gt;&lt;h2&gt;&lt;a href="#developer-tools" class="anchor" name="developer-tools"&gt;&lt;/a&gt;Developer Tools&lt;/h2&gt;
&lt;p&gt;A new &lt;code&gt;spring-boot-devtools&lt;/code&gt; module has been added which aims to improve the development-time experience. The module provides:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Sensible property defaults (for example disabling template caches)&lt;/li&gt;
  &lt;li&gt;Automatic application restarts&lt;/li&gt;
  &lt;li&gt;LiveReload support&lt;/li&gt;
  &lt;li&gt;Remote development support (including remote updates and remote debug via an HTTP tunnel).&lt;/li&gt;
  &lt;li&gt;Persistent HTTP sessions across restarts&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you&amp;rsquo;ve got 10 minutes to spare, here&amp;rsquo;s a &lt;a href="https://www.youtube.com/watch?v=A70NMxV13TI"&gt;short introductory video&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;&lt;a href="#caching-auto-configuration" class="anchor" name="caching-auto-configuration"&gt;&lt;/a&gt;Caching Auto-configuration&lt;/h2&gt;
&lt;p&gt;We now provide auto configuration for EhCache, Hazelcast, Infinispan, JCache (JSR 107) implementations, Redis and Guava.&lt;/p&gt;
&lt;p&gt;In addition, simple Map based in-memory caching is also supported&lt;/p&gt;&lt;h2&gt;&lt;a href="#fully-executable-jars-and-service-support" class="anchor" name="fully-executable-jars-and-service-support"&gt;&lt;/a&gt;Fully executable JARs and service support&lt;/h2&gt;
&lt;p&gt;The Maven and Gradle plugins can now generate fully executable archives for Linux/Unix that can be run by just typing:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;$ ./myapp.jar
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Even better, they work as &lt;code&gt;init.d&lt;/code&gt; or &lt;code&gt;systemd&lt;/code&gt; services. To install as an &lt;code&gt;init.d&lt;/code&gt; service just create a symlink:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;$ sudo link -s /var/myapp/myapp.jar /etc/init.d/myapp
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a href="#color-banners" class="anchor" name="color-banners"&gt;&lt;/a&gt;Color banners&lt;/h2&gt;
&lt;p&gt;Your &lt;code&gt;banner.txt&lt;/code&gt; files can now include ANSI color codes. You can do crazy things like this:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/philwebb/media/master/boot13/colorbanner.png" alt="Color Banner" /&gt;&lt;/p&gt;&lt;h2&gt;&lt;a href="#support-for-webservlet-webfilter-and-weblistener-annotations" class="anchor" name="support-for-webservlet-webfilter-and-weblistener-annotations"&gt;&lt;/a&gt;Support for @WebServlet, @WebFilter and @WebListener annotations&lt;/h2&gt;
&lt;p&gt;When using an embedded servlet container, automatic registration of &lt;code&gt;@WebServlet&lt;/code&gt;, &lt;code&gt;@WebFilter&lt;/code&gt; and &lt;code&gt;@WebListener&lt;/code&gt; annotated classes can now be enabled using &lt;code&gt;@ServletComponentScan&lt;/code&gt;.&lt;/p&gt;&lt;h2&gt;&lt;a href="#additional-auto-configurations" class="anchor" name="additional-auto-configurations"&gt;&lt;/a&gt;Additional auto-configurations&lt;/h2&gt;
&lt;p&gt;Out-of-the-box auto-configurations are now provided for:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Cassandra&lt;/li&gt;
  &lt;li&gt;OAuth2&lt;/li&gt;
  &lt;li&gt;Spring Session&lt;/li&gt;
  &lt;li&gt;jOOQ&lt;/li&gt;
  &lt;li&gt;SendGrid&lt;/li&gt;
  &lt;li&gt;Artemis&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;&lt;a href="#actuator-metrics" class="anchor" name="actuator-metrics"&gt;&lt;/a&gt;Actuator Metrics&lt;/h2&gt;
&lt;p&gt;Metrics support has been extended to support export and aggregation. In addition, Java 8 specific &lt;code&gt;GaugeService&lt;/code&gt; and &lt;code&gt;CounterService&lt;/code&gt; implementations are now provided (and used when possible) which offer improved performance.&lt;/p&gt;&lt;h2&gt;&lt;a href="#update-endpoints-and-health-indicators" class="anchor" name="update-endpoints-and-health-indicators"&gt;&lt;/a&gt;Update Endpoints and Health Indicators&lt;/h2&gt;
&lt;p&gt;We now include &lt;code&gt;/logfile&lt;/code&gt;, &lt;code&gt;/flyway&lt;/code&gt; and &lt;code&gt;/liquibase&lt;/code&gt; actuator endpoints as well as support for Elasticsearch, Email and JMS health indicators.&lt;/p&gt;&lt;h2&gt;&lt;a href="#other-changes" class="anchor" name="other-changes"&gt;&lt;/a&gt;Other changes&lt;/h2&gt;
&lt;p&gt;There&amp;rsquo;s a whole host of other changes and improvements that are documented in the &lt;a href="https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-1.3-Release-Notes"&gt;Release Notes&lt;/a&gt;. You can also find a list of deprecated classes and methods that we plan to remove in the next version.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Thanks so much to everyone that has supported Spring Boot. This release alone has seen 128 contributors join the effort. If you&amp;rsquo;re interested in helping out check out the &lt;a href="https://github.com/spring-projects/spring-boot/issues?q=is%3Aopen+is%3Aissue+label%3A%22ideal+for+contribution%22"&gt;&amp;ldquo;ideal for contribution&amp;rdquo; tag&lt;/a&gt; in the issue repository. If you have general questions, please ask at &lt;a href="http://stackoverflow.com"&gt;stackoverflow.com&lt;/a&gt; using the &lt;a href="http://stackoverflow.com/tags/spring-boot"&gt;&lt;code&gt;spring-boot&lt;/code&gt; tag&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Finally, if you&amp;rsquo;ve yet to see Spring Boot in action, you might want to check out &lt;a href="https://www.youtube.com/watch?v=7cemYpV1fNI"&gt;this Devoxx talk&lt;/a&gt; by &lt;a href="https://spring.io/team/snicoll"&gt;Stéphane Nicoll&lt;/a&gt; and &lt;a href="https://spring.io/team/bclozel"&gt;Brian Clozel&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://projects.spring.io/spring-boot/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot"&gt;GitHub&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot/issues"&gt;Issues&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle"&gt;Documentation&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Framework 4.2.3 available now</title>
    <link rel="alternate" href="https://spring.io/blog/2015/11/16/spring-framework-4-2-3-available-now" />
    <category term="releases" label="Releases" />
    <author>
      <name>Stéphane Nicoll</name>
    </author>
    <id>tag:spring.io,2015-11-16:2298</id>
    <updated>2015-11-16T10:45:03Z</updated>
    <content type="html">&lt;p&gt;On behalf of the team I am pleased to announce that Spring Framework 4.2.3 is now available from repo.spring.io and Maven Central. This third maintenance release in the 4.2 line contains &lt;a href="https://jira.spring.io/secure/ReleaseNote.jspa?projectId=10000&amp;version=15296"&gt;over 60 fixes and improvements&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We strongly recommend an immediate upgrade to 4.2.3 for all 4.x users. This release is the foundation for the upcoming Spring Boot 1.3 GA release coming up &lt;em&gt;very&lt;/em&gt; soon.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://projects.spring.io/spring-framework/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-framework"&gt;GitHub&lt;/a&gt; | &lt;a href="https://jira.spring.io/browse/SPR"&gt;Issues&lt;/a&gt; | &lt;a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/htmlsingle/"&gt;Documentation&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - November, 10, 2015</title>
    <link rel="alternate" href="https://spring.io/blog/2015/11/10/this-week-in-spring-november-10-2015" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2015-11-10:2295</id>
    <updated>2015-11-10T14:11:00Z</updated>
    <content type="html">&lt;p&gt;Welcome to another installation of &lt;em&gt;This Week in Spring&lt;/em&gt;! This week I&amp;rsquo;m in Antwerp, Belgium for the grand mother of all Devoxxes (Devoxxen?), Devoxx Belgium! I&amp;rsquo;m here along with several members of the team and &lt;a href="http://twitter.com/starbuxman"&gt;if you&amp;rsquo;re around, don&amp;rsquo;t hesitate to say hi&lt;/a&gt;!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2015/11/03/spring-xd-1-3-rc1-released"&gt;Dr. Mark Pollack has just announced the release of Spring XD 1.3RC1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Stormpath, the cloud, and on-premise, identity provider as-a-service has put up &lt;a href="https://stormpath.com/blog/build-spring-boot-spring-security-app/"&gt;an &lt;em&gt;exhaustive&lt;/em&gt; blog on using their Spring Boot auto-configuration with Spring Security&lt;/a&gt;! This is a &lt;em&gt;really&lt;/em&gt; cool integration. I hope people reward their hard work in striving for the most powerful, expressive, and convenient developer experience! Way to go!&lt;/li&gt;
  &lt;li&gt;Check out this short-and-sweet article on DZone &lt;a href="https://dzone.com/articles/under-the-boot"&gt;to learn about Spring Boot&amp;rsquo;s auto-configuration mechanism &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The Spring framework Guru is back with a video tutorial &lt;a href="https://www.youtube.com/watch?v=NNYB7G-WP5s"&gt;on using Thymeleaf to create an index page&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Check out our own mad-scientist Andy Clement&amp;rsquo;s video &lt;a href="https://www.youtube.com/watch?v=kr_79McGjHY"&gt;introducing Flo, a UI for batch job orchestration on Spring XD!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The &lt;em&gt;CoffeaElectronica&lt;/em&gt; blog has a &lt;a href="http://coffeaelectronica.com/blog/2015/spring-shell.html"&gt;post on using and extending the Spring Boot Remote Shell&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Check out Adib Saikali&amp;rsquo;s epic &lt;a href="http://www.infoq.com/articles/Next-Generation-Session-Management-with-Spring-Session"&gt;InfoQ article on using Spring Session&lt;/a&gt; &lt;a href="http://www.infoq.com/articles/Next-Generation-Session-Management-with-Spring-Session"&gt;http://www.infoq.com/articles/Next-Generation-Session-Management-with-Spring-Session&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;our pal Ryan Baxter has posted another installment &lt;a href="http://ryanjbaxter.com/2015/11/04/building-cloud-native-apps-with-spring-part-7/"&gt;in his series on building cloud-native apps with Spring Boot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;This isn&amp;rsquo;t strictly Spring related, but interesting: Matt Raible&amp;rsquo;s post on InfoQ looks at &lt;a href="http://www.infoq.com/news/2015/11/maven-central-at-google"&gt;Google&amp;rsquo;s &lt;em&gt;much faster&lt;/em&gt; mirror of Maven Central&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Also, Atlassian has a nice &lt;a href="https://www.atlassian.com/continuous-delivery/nuts-and-bolts-continuous-integration"&gt;ad-article on continuous-integration as the basis of continuous delivery&lt;/a&gt;, which is a &lt;em&gt;very&lt;/em&gt; powerful thing to grok. This was a nice short primer so I figured I&amp;rsquo;d pass it on&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>Spring XD 1.3 RC1 released</title>
    <link rel="alternate" href="https://spring.io/blog/2015/11/03/spring-xd-1-3-rc1-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Mark Pollack</name>
    </author>
    <id>tag:spring.io,2015-11-03:2294</id>
    <updated>2015-11-03T21:35:46Z</updated>
    <content type="html">&lt;p&gt;On behalf of the Spring XD team, I am very pleased to announce the first release candidate of Spring XD 1.3 is now &lt;a href="http://repo.spring.io/libs-milestone/org/springframework/xd/spring-xd/1.3.0.RC1/spring-xd-1.3.0.RC1-dist.zip"&gt;available for download&lt;/a&gt;. You can also install using &lt;a href="http://docs.spring.io/spring-xd/docs/1.3.0.RC1/reference/html/#osx-homebrew-installation"&gt;brew&lt;/a&gt; and &lt;a href="http://docs.spring.io/spring-xd/docs/1.3.0.RC1/reference/html/#redhatcentos-installation"&gt;rpm&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This release includes some major new functionality for batch jobs. We have introduced the ability to create composed jobs that allows you to create a complex graph of jobs executed based on a new Job DSL. &lt;a href="https://network.pivotal.io/products/p-spring-flo/"&gt;Flo for Spring XD UI&lt;/a&gt; has been updated to support the new Job DSL and provide a visual drag and drop canvas for creating composed jobs. Spring XD’s job execution UI also supports execution history of composed jobs. The video in the Flo for XD blog post shows it in action.&lt;/p&gt;
&lt;iframe width="420" height="315" src="https://www.youtube.com/embed/kr_79McGjHY" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
&lt;p&gt;Another important new feature is a timeout value for flushing writes to HDFS in order to ensure data is persisted on the HDFS DataNode’s disks. &lt;/p&gt;
&lt;p&gt;You can view the &lt;a href="https://jira.spring.io/jira/secure/ReleaseNote.jspa?projectId=11401&amp;version=15100"&gt;JIRA release notes&lt;/a&gt; for additional details on bug fixes and general improvements. &lt;/p&gt;
&lt;p&gt;We are targeting the 1.3 GA release on November 17th. After the 1.3 GA release, the 1.x release line will be in maintenance mode, addressing only bug fixes. The next release line introduces a major redesign to the underlying architecture and breaking up Spring XD into several independent projects. More details can be found in the blog posts: &lt;a href="http://blog.pivotal.io/pivotal-cloud-foundry/products/introducing-spring-cloud-data-flow"&gt;Introducing Spring Cloud Data Flow&lt;/a&gt; and &lt;a href="http://blog.pivotal.io/pivotal-perspectives/features/a-quick-look-at-spring-cloud-data-flow"&gt;A Quick Look At Spring Cloud Data Flow&lt;/a&gt;. InfoQ also summarizes the changes in the article &lt;a href="http://www.infoq.com/news/2015/09/spring-cloud-data-flow"&gt;SpringXD being Re-architected and Re-branded to Spring Cloud Data Flow&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Feedback is very important, so please get in touch with questions and comments via&lt;br/&gt;* &lt;a href="http://stackoverflow.com/questions/tagged/spring-xd"&gt;StackOverflow&lt;/a&gt; &lt;code&gt;spring-xd&lt;/code&gt; tag&lt;br/&gt;* &lt;a href="https://jira.spring.io/browse/XD/?selectedTab=com.atlassian.jira.jira-projects-plugin:summary-panel"&gt;Spring JIRA&lt;/a&gt; or &lt;a href="https://github.com/spring-projects/spring-xd/issues"&gt;GitHub Issues&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring  (PCF 1.6 edition!) - November 3, 2015</title>
    <link rel="alternate" href="https://spring.io/blog/2015/11/03/this-week-in-spring-pcf-1-6-edition-november-3-2015" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2015-11-03:2292</id>
    <updated>2015-11-03T12:58:07Z</updated>
    <content type="html">&lt;p&gt;Welcome to another installation of &lt;em&gt;This Week in Spring&lt;/em&gt;! This week I&amp;rsquo;m in Sofia, Bulgaria for &lt;a href="http://2015.java2days.com/"&gt;one of my favorite shows, the epic Java2Days event&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Last week saw the release (_finally!_) of &lt;strong&gt;Pivotal Cloud Foundry 1.6&lt;/strong&gt;, which contains more than a year and half of highly anticipated features and heavy lifting. The new release includes, among &lt;em&gt;many other things&lt;/em&gt;, support for platform-managed GitLab, JFrog Artifactory, and CloudBees Jenkins CI; support for microservices infrastructure including the Spring Cloud Config Server, and Spring Cloud Eureka; and support for Docker container images and .NET applications; and &lt;a href="http://www.eweek.com/cloud/microsoft-azure-embraces-cloud-foundry-open-source-paas.html"&gt;support for running on Microsoft Azure&lt;/a&gt;. This release is &lt;em&gt;packed&lt;/em&gt; with all sorts of features optimized for the continuous and safe delivery of software into production and I wholeheartedly encourage you to take a look at it for your environment. PCF is based &lt;a href="http://cloudfoundry.org"&gt;on Cloud Foundry&lt;/a&gt;. Cloud Foundry is a platform-as-a-service that stands up services and integrations to support developing and deploying applications in a predictable, safe way. It is the epitome of a high performing software organization and their virtues.&lt;/p&gt;
&lt;p&gt;As usual, we&amp;rsquo;ve got a lot to cover so let&amp;rsquo;s get to it!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;InfoQ also has nice writeup of &lt;a href="http://www.infoq.com/news/2015/11/pivotal-cloud-foundry-netflix"&gt;some of the new features in PCF 1.6&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;then Pieter Humphrey and Matt Stine provided a walkthrough of some of &lt;a href="http://blog.pivotal.io/pivotal-cloud-foundry/products/now-available-spring-cloud-services-for-pivotal-cloud-foundry"&gt;the Spring Cloud Services-specific support in Pivotal Cloud Foundry&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Ian Andrews set the &lt;a href="http://blog.pivotal.io/pivotal-cloud-foundry/products/pivotal-cloud-foundry-1-6-now-available"&gt;stage with this announcement blog for Pivotal Cloud Foundry 1.6&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Security lead Rob Winch has just announced &lt;a href="http://spring.io/blog/2015/11/02/spring-security-3-2-9-released"&gt;Spring Security 3.2.9.RELEASE&lt;/a&gt; and &lt;a href="http://spring.io/blog/2015/11/02/spring-security-3-2-9-released"&gt;Spring Security 4.0.3.RELEASE&lt;/a&gt;, both of packed with minor improvements and security fixes&lt;/li&gt;
  &lt;li&gt;Spring IO Platform lead Andy Wilkinson has &lt;a href="http://spring.io/blog/2015/10/29/spring-io-platform-2-0-0-rc1"&gt;just announced Spring IO Platform 2.0.0.RC1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring ninja Greg Turnquist&amp;rsquo;s &lt;a href="http://spring.io/blog/2015/10/28/react-js-and-spring-data-rest-part-5-security"&gt;epic fifth post in a series on using Spring Data REST with React.js&lt;/a&gt; looks at security in this latest installment.&lt;/li&gt;
  &lt;li&gt;Spring Cloud co-founder Spencer Gibb put up a nice post a little while ago &lt;a href="http://spencer.gibb.us/blog/2015/09/24/spring-cloud-config-push-notifications/"&gt;on emitting notifications, so that properties may be reloaded in various config clients, when something has changed in the Spring Cloud managed Git repository&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;this blog from 2014 from our pal Jakub Kubrynski does &lt;a href="http://www.kubrynski.com/2014/12/include-java-agent-in-standalone-spring.html"&gt;a great job of explaining how to include New Relic in a Spring Boot application&lt;/a&gt;. We saw this post last year, but someone asked me a similar question this week and it&amp;rsquo;s worth pointing people to.&lt;/li&gt;
  &lt;li&gt;Ashish Datta has a nice post &lt;a href="http://shout.setfive.com/2015/11/02/spring-boot-authentication-with-custom-http-header/"&gt;on using a custom authorization token with Spring Security&lt;/a&gt;. I might add that you should &lt;a href="http://spring.io/guides/tutorials/spring-security-and-angular-js/"&gt;consider using Spring Security OAuth&lt;/a&gt; for this as this basic mechanism, and much more, are all baked in and foreword compatible if you should ever decide to layer on more of the features that OAuth already provides.&lt;/li&gt;
  &lt;li&gt;Pivotal&amp;rsquo;s own advocate Mark Heckler &lt;a href="http://www.thehecklers.org/2015/11/02/springing-forward/"&gt;put up a nice blog on his first impressions having recently joined Pivotal&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;my Pivotal Labs pal Jacques Chester helped me find this &lt;a href="http://blog.pivotal.io/labs/labs/level-up-your-development-workflow-with-github-pivotal-tracker"&gt;great blog on using Pivotal Tracker in a continuous delivery flow from 2012&lt;/a&gt;. This isn&amp;rsquo;t specific to Spring, but I think it&amp;rsquo;s super helpful for someone managing a complex project, and it&amp;rsquo;s definitely something I&amp;rsquo;ll be treating in my upcoming book, &lt;a href="http://cloudnativejava.io/about/"&gt;&lt;em&gt;Cloud Native Java&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>Spring XD 1.3 Demo: Flo for Batch</title>
    <link rel="alternate" href="https://spring.io/blog/2015/11/03/spring-xd-1-3-demo-flo-for-batch" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-11-03:2293</id>
    <updated>2015-11-03T10:41:00Z</updated>
    <content type="html">&lt;p&gt;Flo for Batch pipeline builds upon the newly supported Batch DSL in Spring XD that can be used to create composite batch workflows involving sequential, parallel or even the combination of both jobs.&lt;br/&gt;&lt;iframe width="420" height="315" src="https://www.youtube.com/embed/kr_79McGjHY" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Security 3.2.9 Released</title>
    <link rel="alternate" href="https://spring.io/blog/2015/11/02/spring-security-3-2-9-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Rob Winch</name>
    </author>
    <id>tag:spring.io,2015-10-30:2290</id>
    <updated>2015-11-02T08:00:00Z</updated>
    <content type="html">&lt;p&gt;I’m pleased to announce the release of Spring Security 3.2.9.RELEASE. This release provides bug fixes and minor enhancements. For complete details on the release, refer to the &lt;a href="https://jira.spring.io/browse/SEC/fixforversion/15254/?selectedTab=com.atlassian.jira.plugins.jira-development-integration-plugin%3Arelease-report-tabpanel"&gt;Change Log&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Highlights of the release include:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://jira.spring.io/browse/SEC-2190"&gt;SEC-2190&lt;/a&gt; - Fixing integration with the JSP tag libraries when Spring Security is registered in a child ApplicationContext&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://jira.spring.io/browse/SEC-2521"&gt;SEC-2521&lt;/a&gt; - Removal of synchronized in StandardPasswordEncoder which drastically improves performance&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://jira.spring.io/browse/SEC-3108"&gt;SEC-3108&lt;/a&gt; - Fix potential race condition in DigestAuthenticationFilter&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://jira.spring.io/browse/SEC-3109"&gt;SEC-3109&lt;/a&gt; - DelegatingSecurityContextExecutor works with Concurrent/ThreadPoolTaskScheduler&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://projects.spring.io/spring-security/"&gt;Project Site&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-security/site/docs/3.2.9.RELEASE/reference/htmlsingle/"&gt;Reference&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-security/site/docs/3.2.9.RELEASE/guides/"&gt;Guides&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
</feed>
